AC_ARG_ENABLE(64bit,
              [  --enable-64bit		Make a 64-bit build.],
              ok=${enableval},
              ok="no")
if test "${ok}" != "no"
then
   AC_MSG_RESULT(enabling 64-bit compiles...)
   cxx_64_flags="${sys_cxx_64_flags}"
   target="${target}-64"
fi



AC_ARG_ENABLE(warnings,
	      [  --enable-warnings  		Turn on compiler warnings (default is on) ],
	      ok=$enable_warnings,
	      ok="yes")
if test "${ok}" = "no" 
then 
     AC_MSG_RESULT(disabling warnings...)
     cxx_warn_flags=""
else
     AC_MSG_RESULT(enabling warnings...)
     cxx_warn_flags="${sys_cxx_warn_flags}"
fi



AC_ARG_ENABLE(debugging,
	      [  --enable-debugging  		Turn on compiler debugging (default is off) ],
	      ok=$enable_debugging,
	      ok="no")
if test "${ok}" = "no" 
then 
     AC_MSG_RESULT(disabling debugging...)
     cxx_debug_flags=""
else
     AC_MSG_RESULT(enabling debugging...)
     cxx_debug_flags="${sys_cxx_debug_flags} -D__DEBUG"
fi



AC_ARG_ENABLE(optz,
	       [  --enable-optz  		Turn on optimization at default level (default is on); Compile with optimization level (med, fast, fastest)],
	       ok=$enable_optz,
	       ok="yes")
if test "${ok}" = "no" 
then 
     AC_MSG_RESULT(disabling optimizations...)
     cxx_optz_flags=""
elif test "${ok}" = "med"
then
     AC_MSG_RESULT(enabling medium optimizations...)
     cxx_optz_flags="${sys_cxx_optz_med}"
elif test "${ok}" = "fast"
then
     AC_MSG_RESULT(enabling fast optimizations...)
     cxx_optz_flags="${sys_cxx_optz_fast}"
elif test "${ok}" = "fastest"
then
     AC_MSG_RESULT(enabling fastest optimizations...)
     cxx_optz_flags="${sys_cxx_optz_fastest}"
else
     AC_MSG_RESULT(enabling default level optimizations...)
     cxx_optz_flags="${def_cxx_optz_flags}"
fi



AC_ARG_ENABLE(verbose,
	      [  --enable-verbose  		Turn on compiler verbose (default is on)],
	      ok=$enable_verbose,
	      ok="yes")
if test "${ok}" = "no" 
then 
     AC_MSG_RESULT(disabling verbose...)
     cxx_verb_flags=""
else
     AC_MSG_RESULT(enabling verbose...)
     cxx_verb_flags="${sys_cxx_verb_flags}"
fi



AC_ARG_ENABLE(shared,
              [--enable-shared        Make shared DSOs for all libraries],
              ok="yes",
              ok="no")

if test "${ok}" != "no"
then
    AC_MSG_RESULT(enabling DSOs...)
    make_dsos="true"
else
    make_dsos="false"
fi
AC_SUBST(make_dsos)



AC_ARG_WITH(includes,
            [  --with-includes=INCLUDES  	Add INCLUDES],
	    ok=${withval},
	    ok="no")
if test "${ok}" != "no" && test "${ok}" != "yes" && test -n "${ok}"
then
    AC_MSG_RESULT(adding additional includes... ${ok})
    cxx_includes="${cxx_includes} ${ok}"
fi



AC_ARG_WITH(libpaths,
            [  --with-libpaths=LIBPATHs	Add LIBPATHS],
	    ok=${withval},
	    ok="no")
if test "${ok}" != "no" && test "${ok}" != "yes" && test -n "${ok}"
then
    AC_MSG_RESULT(adding additional libpaths... ${ok})
    link_libpath="${link_libpath} ${ok}"
fi



AC_ARG_WITH(flags,
            [  --with-flags=FLAGS  		Use FLAGS as compiler options],
            ok=${withval},
            ok="no")
if test "${ok}" != "no" && test "${ok}" != "yes" && test -n "${ok}"
then
   cxx_flags="${cxx_flags} ${ok}"
fi



AC_ARG_WITH(defs,
            [  --with-defs=DEFS		Use DEFS as macro definitions],
            ok=${withval},
            ok="no")
if test "${ok}" != "no" && test "${ok}" != "yes" && test -n "${ok}"
then
   cxx_defs="${cxx_defs} ${ok}"
fi



AC_ARG_WITH(libs,
            [  --with-libs=LIBS		Link executable with LIBS],
            ok=${withval},
            ok="no")
if test "${ok}" != "no" && test "${ok}" != "yes" && test -n "${ok}"
then
   link_libs="${ok} ${link_libs}"
fi


dnl ### Process '--with-<libs>' options. ###
AC_ARG_WITH(dummy,
            [
Link libraries. These specify libraries that will be linked with the executable.
The final library options are built from:
 (pre_libs) (libs) (post_libs)
 ])

AC_ARG_WITH(prelibs,
            [  --with-prelibs=LIBS		Link executable with LIBS],
            ok=${withval},
            ok="no")
if test "${ok}" != "no" && test "${ok}" != "yes" && test -n "${ok}"
then
   link_prelibs="${ok} ${link_prelibs}"
fi

