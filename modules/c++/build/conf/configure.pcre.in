make_pcre_driver="echo 'skipping pcre driver installation'"

AC_ARG_WITH(pcre-home,
            [  --with-pcre-home=HOME		Compile with HOME],
            ok=${withval},
            ok="no")
if test "${ok}" != "no" && test "${ok}" != "yes" && test -n "${ok}"
then
    AC_MSG_RESULT(setting pcre home... ${ok})
    link_pcre_libpath="-L${ok}/lib"
    cxx_pcre_includes="-I${ok}/include"
    pcre_home_defined="yes"
    make_pcre_driver="echo 'skipping pcre driver installation'"
fi


AC_ARG_ENABLE(pcre,
                [  --enable-pcre  		Turn on PCRE ],
            ok=${enableval},
            ok="yes")

if test "${ok}" = "no"
then
    AC_MSG_RESULT(disabling pcre...)
else
    AC_MSG_RESULT(enabling pcre...)
    link_pcre_libs="-lpcre"
    cxx_pcre_defs="-DUSE_PCRE"
    
    # If home was not defined then check if pcre is installed
    if test "${pcre_home_defined}" != "yes"
    then
        # Try this, if its there, use it, else use the driver
        link_pcre_libpath="-L$PWD/re/lib/${target}/${lib_dir}"
        cxx_pcre_includes="-I$PWD/re/include"
	    build_pcre="true"
        make_pcre_driver="make pcre_driver"
	    AC_MSG_RESULT(using bundled pcre driver...)
    else
        AC_MSG_RESULT(pcre includes directory... ${cxx_pcre_includes})
        AC_MSG_RESULT(pcre library directory... ${link_pcre_libpath})
    fi
fi


cxx_includes="${cxx_includes} ${cxx_pcre_includes}"
cxx_defs="${cxx_defs} ${cxx_pcre_defs}"
link_libs="${link_libs} ${link_pcre_libs}"
link_libpath="${link_libpath} ${link_pcre_libpath}"


AC_SUBST(make_pcre_driver)
