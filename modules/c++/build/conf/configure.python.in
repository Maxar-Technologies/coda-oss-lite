dnl #### http://autoconf-archive.cryp.to/ac_python_devel.html
dnl
dnl SYNOPSIS
dnl
dnl   AC_PYTHON_DEVEL([version])
dnl
dnl DESCRIPTION
dnl
dnl   Note: Defines as a precious variable "PYTHON_VERSION". Don't
dnl   override it in your configure.ac.
dnl
dnl   This macro checks for Python and tries to get the include path to
dnl   'Python.h'. It provides the $(PYTHON_CPPFLAGS) and
dnl   $(PYTHON_LDFLAGS) output variables. It also exports
dnl   $(PYTHON_EXTRA_LIBS) and $(PYTHON_EXTRA_LDFLAGS) for embedding
dnl   Python in your code.
dnl
dnl   You can search for some particular version of Python by passing a
dnl   parameter to this macro, for example ">= '2.3.1'", or "== '2.4'".
dnl   Please note that you *have* to pass also an operator along with the
dnl   version to match, and pay special attention to the single quotes
dnl   surrounding the version number. Don't use "PYTHON_VERSION" for
dnl   this: that environment variable is declared as precious and thus
dnl   reserved for the end-user.
dnl
dnl   This macro should work for all versions of Python >= 2.1.0. As an
dnl   end user, you can disable the check for the python version by
dnl   setting the PYTHON_NOVERSIONCHECK environment variable to something
dnl   else than the empty string.
dnl
dnl   If you need to use this macro for an older Python version, please
dnl   contact the authors. We're always open for feedback.
dnl
dnl LAST MODIFICATION
dnl
dnl   2007-07-31
dnl
dnl COPYLEFT
dnl
dnl   Copyright (c) 2007 Sebastian Huber <sebastian-huber@web.de>
dnl   Copyright (c) 2007 Alan W. Irwin <irwin@beluga.phys.uvic.ca>
dnl   Copyright (c) 2007 Rafael Laboissiere <rafael@laboissiere.net>
dnl   Copyright (c) 2007 Andrew Collier <colliera@ukzn.ac.za>
dnl   Copyright (c) 2007 Matteo Settenvini <matteo@member.fsf.org>
dnl   Copyright (c) 2007 Horst Knorr <hk_classes@knoda.org>
dnl
dnl   This program is free software: you can redistribute it and/or
dnl   modify it under the terms of the GNU General Public License as
dnl   published by the Free Software Foundation, either version 3 of the
dnl   License, or (at your option) any later version.
dnl
dnl   This program is distributed in the hope that it will be useful, but
dnl   WITHOUT ANY WARRANTY; without even the implied warranty of
dnl   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
dnl   General Public License for more details.
dnl
dnl   You should have received a copy of the GNU General Public License
dnl   along with this program. If not, see
dnl   <http://www.gnu.org/licenses/>.
dnl
dnl   As a special exception, the respective Autoconf Macro's copyright
dnl   owner gives unlimited permission to copy, distribute and modify the
dnl   configure scripts that are the output of Autoconf when processing
dnl   the Macro. You need not follow the terms of the GNU General Public
dnl   License when using or distributing such scripts, even though
dnl   portions of the text of the Macro appear in them. The GNU General
dnl   Public License (GPL) does govern all other use of the material that
dnl   constitutes the Autoconf Macro.
dnl
dnl   This special exception to the GPL applies to versions of the
dnl   Autoconf Macro released by the Autoconf Macro Archive. When you
dnl   make and distribute a modified version of the Autoconf Macro, you
dnl   may extend this special exception to the GPL to apply to your
dnl   modified version as well.

AC_DEFUN([AC_PYTHON_DEVEL],[
	#
	# Allow the use of a (user set) custom python version
	#
	AC_ARG_VAR([PYTHON_VERSION],[The installed Python
		version to use, for example '2.3'. This string
		will be appended to the Python interpreter
		canonical name.])

	AC_PATH_PROG([PYTHON],[python[$PYTHON_VERSION]])
	if test -z "$PYTHON"; then
	   AC_MSG_ERROR([Cannot find python$PYTHON_VERSION in your system path])
	   PYTHON_VERSION=""
	fi

	#
	# Check for a version of Python >= 2.1.0
	#
	AC_MSG_CHECKING([for a version of Python >= '2.1.0'])
	ac_supports_python_ver=`$PYTHON -c "import sys, string; \
		ver = string.split(sys.version)[[0]]; \
		print ver >= '2.1.0'"`
	if test "$ac_supports_python_ver" != "True"; then
		if test -z "$PYTHON_NOVERSIONCHECK"; then
			AC_MSG_RESULT([no])
			AC_MSG_FAILURE([
This version of the AC@&t@_PYTHON_DEVEL macro
doesn't work properly with versions of Python before
2.1.0. You may need to re-run configure, setting the
variables PYTHON_CPPFLAGS, PYTHON_LDFLAGS, PYTHON_SITE_PKG,
PYTHON_EXTRA_LIBS and PYTHON_EXTRA_LDFLAGS by hand.
Moreover, to disable this check, set PYTHON_NOVERSIONCHECK
to something else than an empty string.
])
		else
			AC_MSG_RESULT([skip at user request])
		fi
	else
		AC_MSG_RESULT([yes])
	fi

	#
	# if the macro parameter ``version'' is set, honour it
	#
	if test -n "$1"; then
		AC_MSG_CHECKING([for a version of Python $1])
		ac_supports_python_ver=`$PYTHON -c "import sys, string; \
			ver = string.split(sys.version)[[0]]; \
			print ver $1"`
		if test "$ac_supports_python_ver" = "True"; then
	   	   AC_MSG_RESULT([yes])
		else
			AC_MSG_RESULT([no])
			AC_MSG_ERROR([this package requires Python $1.
If you have it installed, but it isn't the default Python
interpreter in your system path, please pass the PYTHON_VERSION
variable to configure. See ``configure --help'' for reference.
])
			PYTHON_VERSION=""
		fi
	fi

	#
	# Check if you have distutils, else fail
	#
	AC_MSG_CHECKING([for the distutils Python package])
	ac_distutils_result=`$PYTHON -c "import distutils" 2>&1`
	if test -z "$ac_distutils_result"; then
		AC_MSG_RESULT([yes])
	else
		AC_MSG_RESULT([no])
		AC_MSG_ERROR([cannot import Python module "distutils".
Please check your Python installation. The error was:
$ac_distutils_result])
		PYTHON_VERSION=""
	fi

	#
	# Check for Python include path
	#
	AC_MSG_CHECKING([for Python include path])
	if test -z "$PYTHON_CPPFLAGS"; then
		python_path=`$PYTHON -c "import distutils.sysconfig; \
           		print distutils.sysconfig.get_python_inc();"`
		if test -n "${python_path}"; then
		   	python_path="-I$python_path"
		fi
		PYTHON_CPPFLAGS=$python_path
	fi
	AC_MSG_RESULT([$PYTHON_CPPFLAGS])
	AC_SUBST([PYTHON_CPPFLAGS])

	#
	# Check for Python library path
	#
	AC_MSG_CHECKING([for Python library path])
	if test -z "$PYTHON_LDFLAGS"; then
		# (makes two attempts to ensure we've got a version number
		# from the interpreter)
		py_version=`$PYTHON -c "from distutils.sysconfig import *; \
			from string import join; \
			print join(get_config_vars('VERSION'))"`
		if test "$py_version" == "[None]"; then
			if test -n "$PYTHON_VERSION"; then
				py_version=$PYTHON_VERSION
			else
				py_version=`$PYTHON -c "import sys; \
					print sys.version[[:3]]"`
			fi
		fi

		PYTHON_LDFLAGS=`$PYTHON -c "from distutils.sysconfig import *; \
			from string import join; \
			print '-L' + get_python_lib(0,1), \
		      	'-lpython';"`$py_version
		PYTHON_LIBPATH=`$PYTHON -c "from distutils.sysconfig import *; \
			from string import join; \
			print '-L' + get_python_lib(0,1);"`
		PYTHON_LIBPATH="$PYTHON_LIBPATH $PYTHON_LIBPATH/config"
		
	fi
	AC_MSG_RESULT([$PYTHON_LDFLAGS])
	AC_SUBST([PYTHON_LDFLAGS])

	#
	# Check for site packages
	#
	AC_MSG_CHECKING([for Python site-packages path])
	if test -z "$PYTHON_SITE_PKG"; then
		PYTHON_SITE_PKG=`$PYTHON -c "import distutils.sysconfig; \
		        print distutils.sysconfig.get_python_lib(0,0);"`
	fi
	AC_MSG_RESULT([$PYTHON_SITE_PKG])
	AC_SUBST([PYTHON_SITE_PKG])

	#
	# libraries which must be linked in when embedding
	#
	AC_MSG_CHECKING(python extra libraries)
	if test -z "$PYTHON_EXTRA_LIBS"; then
	   PYTHON_EXTRA_LIBS=`$PYTHON -c "import distutils.sysconfig; \
                conf = distutils.sysconfig.get_config_var; \
                print conf('LOCALMODLIBS'), conf('LIBS'), '-lm'"`
	fi
	AC_MSG_RESULT([$PYTHON_EXTRA_LIBS])
	AC_SUBST(PYTHON_EXTRA_LIBS)

	#
	# linking flags needed when embedding
	#
	AC_MSG_CHECKING(python extra linking flags)
	if test -z "$PYTHON_EXTRA_LDFLAGS"; then
		PYTHON_EXTRA_LDFLAGS=`$PYTHON -c "import distutils.sysconfig; \
			conf = distutils.sysconfig.get_config_var; \
			print conf('LINKFORSHARED')"`
	fi
	AC_MSG_RESULT([$PYTHON_EXTRA_LDFLAGS])
	AC_SUBST(PYTHON_EXTRA_LDFLAGS)

	#
	# final check to see if everything compiles alright
	#
	AC_MSG_CHECKING([consistency of all components of python development environment])
	AC_LANG_PUSH([C])
	# save current global flags
	LIBS="$ac_save_LIBS $PYTHON_EXTRA_LIBS $PYTHON_LDFLAGS $PYTHON_LIBPATH"
	CPPFLAGS="$ac_save_CPPFLAGS $PYTHON_CPPFLAGS"
	AC_TRY_LINK([
		#include <Python.h>
	],[
		Py_Initialize();
	],[pythonexists=yes],[pythonexists=no])

	AC_MSG_RESULT([$pythonexists])

        if test ! "$pythonexists" = "yes"; then
	   AC_MSG_ERROR([
  Could not link test program to Python. Maybe the main Python library has been
  installed in some non-standard library path. If so, pass it to configure,
  via the LDFLAGS environment variable.
  Example: ./configure LDFLAGS="-L/usr/non-standard-path/python/lib"
  ============================================================================
   ERROR!
   You probably have to install the development version of the Python package
   for your distribution.  The exact name of this package varies among them.
  ============================================================================
	   ])
	  PYTHON_VERSION=""
	fi
	AC_LANG_POP
	# turn back to default flags
	CPPFLAGS="$ac_save_CPPFLAGS"
	LIBS="$ac_save_LIBS"

	#
	# all done!
	#
])



AC_ARG_ENABLE(python,
                [  --enable-python  		Find/Use Python development libs/includes ],
            ok=${enableval},
            ok="no")

if test "${ok}" = "no"
then
    AC_MSG_RESULT(disabling python...)
else
    AC_MSG_RESULT(enabling python...)
    AC_PYTHON_DEVEL
    
    
    #
	# Check for numpy
	#
	AC_MSG_CHECKING([for numpy])
	
	NUMPY_INCLUDE=`$PYTHON -c "import os;\
	p=os.path.join('$PYTHON_SITE_PKG','numpy/core/include'); \
    print os.path.exists(p) and '-I%s' % p or ''"`
	if test -z "$NUMPY_INCLUDE"; then
		AC_MSG_ERROR([this package requires numpy.
		Please install numpy before continuing.
		])
		PYTHON_VERSION=""
	fi
	AC_MSG_RESULT([$PYTHON_SITE_PKG])
	AC_SUBST([PYTHON_SITE_PKG])
    
    
    cxx_python_flags="${cxx_flags} ${PYTHON_CPPFLAGS}"
    cxx_python_includes="${cxx_includes} ${NUMPY_INCLUDE}"
    link_python_libpath="${PYTHON_LIBPATH} ${link_libpath}"
    link_python_libs="${link_libs} -lpython$py_version ${PYTHON_EXTRA_LIBS}"
    AC_SUBST(PYTHON_VERSION)
    AC_SUBST(cxx_python_flags)
    AC_SUBST(cxx_python_includes)
    AC_SUBST(link_python_libpath)
    AC_SUBST(link_python_libs)
fi


