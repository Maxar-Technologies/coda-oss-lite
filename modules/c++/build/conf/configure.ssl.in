make_ssl_driver="echo 'skipping ssl driver installation'"

AC_ARG_WITH(ssl-home,
            [  --with-ssl-home=HOME		Compile with HOME],
            ok=${withval},
            ok="no")
if test "${ok}" != "no" && test "${ok}" != "yes" && test -n "${ok}"
then
    AC_MSG_RESULT(setting ssl home... ${ok})
    link_ssl_libpath="-L${ok}/lib"
    cxx_ssl_includes="-I${ok}/include"
    ssl_home_defined="yes"
    make_ssl_driver="echo 'skipping ssl driver installation'"
fi


AC_ARG_ENABLE(ssl,
                [  --enable-ssl  		Turn on OpenSSL ],
            ok=${enableval},
            ok="no")

if test "${ok}" = "no"
then
    AC_MSG_RESULT(disabling ssl...)
    link_ssl_libs=""
    cxx_ssl_defs=""
else
    AC_MSG_RESULT(enabling ssl...)
    link_ssl_libs="-lssl -lcrypto"
    cxx_ssl_defs="-DUSE_OPENSSL"

    # If home was not defined then check if
    # OpenSSL is installed
    if test "${ssl_home_defined}" != "yes"
    then
        # Always use the bundled driver if home is not specified
        link_ssl_libpath="-L$PWD/net.ssl/lib/${target}/${lib_dir}"
        cxx_ssl_includes="-I$PWD/net.ssl/include"
        make_ssl_driver="make ssl_driver"
	AC_MSG_RESULT(using bundled ssl driver...)
    fi
    if test "${ssl_home_defined}" = "yes"
    then
       AC_MSG_RESULT(ssl includes directory... ${cxx_ssl_includes})
       AC_MSG_RESULT(ssl library directory... ${link_ssl_libpath})
    fi
fi

AC_SUBST(cxx_ssl_includes)
AC_SUBST(cxx_ssl_defs)
AC_SUBST(link_ssl_libs)
AC_SUBST(link_ssl_libpath)
AC_SUBST(make_ssl_driver)
