from os.path import join, exists
from waflib import Utils

MODULES = 'cli dbi except io logging mem mt net net.ssl plugin re str ' \
          'sys tiff unique xml.lite zip math.linear math.poly'
          
def options(opt):
    opt.recurse(filter(lambda x: exists(join(opt.path.abspath(), x, 'wscript')),
                           MODULES.split()))

def configure(conf):
    conf.env.append_value('INCLUDES_UNITTEST', join(conf.path.abspath(), 'include'))
    conf.recurse(filter(lambda x: exists(join(conf.path.abspath(), x, 'wscript')),
                           MODULES.split()))
    
def build(bld):

    modules = filter(lambda x: exists(join(bld.path.abspath(), x)), MODULES.split())
                          
    # build these modules from their project.cfg file
    configBuilds = filter(lambda m: not exists(join(bld.path.abspath(), m, 'wscript')), modules)
    for config in configBuilds :
        bld.fromConfig(join(bld.path.abspath(), config))

    # build the rest with the wscript
    modules = set(modules) - set(configBuilds)
    for mod in modules :
        bld.recurse(mod)

def distclean(context):
    context.recurse(filter(lambda x: exists(join(context.path.abspath(), x, 'wscript')),
                           MODULES.split()))
