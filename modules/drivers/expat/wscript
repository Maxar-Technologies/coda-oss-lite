import os
import Options
from TaskGen import feature, before, taskgen
import Tools.misc as misc

def set_options(opt):
    opt.add_option('--disable-xml', action='store_false', dest='enable_xml', default=True,
                   help='turn off XML')
    opt.add_option('--enable-xml-layer', action='store', choices=['expat', 'libxml', 'xerces'],
                   dest='xml_layer', default='expat', help='Specify the XML layer')
    opt.add_option('--with-xml-home', action='store', dest='xml_home',
                   help='Specify the XML Home - where the XML library is installed to')
    opt.add_option('--build-xml', action='store_true', dest="build_xml",
                   default=True, help='force building XML library (expat) from scratch')
    opt.add_option('--nobuild-xml', action='store_false', dest="build_xml",
                   help='force not building XML library from scratch')

def configure(conf):
    #-- XML --------------------------------------------------------------------
    enableXML = Options.options.enable_xml
    
    if enableXML:
        xmlHome = Options.options.xml_home
        xmlLayer = Options.options.xml_layer
        makeXML = Options.options.build_xml
        
        if makeXML:
            xmlLayer = 'expat'
        
        if xmlHome and not makeXML:
            conf.check_message_1('Setting xml home')
            conf.check_message_2(xmlHome)
            conf.env.append_value('LIBPATH_XML', os.path.join(xmlHome, 'lib'))
            conf.env.append_value('CPPPATH_XML', os.path.join(xmlHome, 'include'))
        
        expatDefines = '-DUSE_EXPAT -DXML_STATIC'
        if not makeXML:
            if xmlLayer == 'expat':
                conf.env.append_value('CXXFLAGS_XML', expatDefines.split())
                if not xmlHome:
                    #look for it on the system
                    if not conf.check_cc(lib='expat', mandatory=False, uselib_store='XML') \
                        or not conf.check_cc(header_name='expat.h'):
                        #we must use/build the local one
                        makeXML = True
                else:
                    conf.env['LIB_XML'] = ['expat']

            elif xmlLayer == 'libxml':
                conf.env.append_value('CXXFLAGS_XML', '-DUSE_LIBXML')
                conf.env['LIB_XML'] = ['xml2']
                if not xmlHome:
                    conf.check_cxx(lib='xml2', mandatory=True, uselib_store='XML')
                    xmlHome = '/usr/'                    
                conf.env.append_value('CPPPATH_XML', os.path.join(xmlHome, 'include/libxml2'))

            elif xmlLayer == 'xerces':
                conf.env.append_value('CXXFLAGS_XML', '-DUSE_XERCES')
                conf.env['LIB_XML'] = ['xerces-c']
                if not xmlHome:
                    conf.check_cxx(lib='xerces-c', mandatory=True, uselib_store='XML')
    
        if makeXML:
            conf.env['MAKE_XML'] = xmlLayer
            conf.env.append_unique('CXXFLAGS_XML', expatDefines.split())
            conf.check_message_1('Building local lib')
            conf.check_message_2(xmlLayer)    

def build(bld):
    variant = bld.env['VARIANT']
    env = bld.env_of_name(variant)
    env.set_variant(variant)

    defs = env['defines']
    defList = []
    for k, v in defs.iteritems():
        if v:
            defList.append('%s=%s' % (k, v))
    #defs = map(lambda t: '%s=%s' % t, [(k, v) for k, v in bld.env['defines'].iteritems()])

    driversNode = bld.path
    
    if 'MAKE_XML' in env:
        
        driver = Options.options.xml_layer
        
        if driver == 'expat':
            fname = 'expat-2.0.0'
            ut = bld.new_task_gen(path=bld.path, fname='%s.tar' % fname,
                                  env=env.copy(), before='XML')
            ut.features = ['untar']
            bld.add_group()
            
            driverNode = driversNode.ensure_dir_node_from_path(fname)
        
            expatDefs = ['PACKAGE_VERSION="2.0.0"',
                         'XML_CONTEXT_BYTES=1024',
                         'XML_DTD=1',
                         'XML_NS=1',
                         'PACKAGE_STRING="expat 2.0.0"',
                         'XML_STATIC=1']
            
            sources = 'lib/xmlparse.c lib/xmltok.c lib/xmlrole.c'
            expat = bld.new_task_gen('cc', env['LIB_TYPE'] or 'staticlib', source=sources,
                             includes='.', export_incdirs='lib',
                             target='expat', path=driverNode,
                             uselib='XML', name='XML', env=env.copy(),
                             defines=defList + expatDefs)
            
            for f in ['expat.h', 'expat_external.h']:
                bld.install_files('${PREFIX}/include',
                              os.path.join(driverNode.abspath(), 'lib/%s' % f))
        else:
            raise Exception('Invalid XML driver: %s' % driver)

def distclean(context):
    #remove the untarred directories
    import shutil
    
    dirs = map(lambda d: os.path.join(context.curdir, d),
               ['expat-1.95.7','expat-2.0.0']
    for d in dirs:
        try:
            if os.path.exists(d):
                shutil.rmtree(d, ignore_errors=True)
        except:{}
    
