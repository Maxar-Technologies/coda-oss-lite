import os
import Options
from TaskGen import feature, before, task_gen


def options(opt):
    opt.add_option('--with-fft-home', action='store', dest='fft_home',
                   help='Specify the FFT Home - where an FFT library is installed')
    opt.add_option('--with-fftw3-home', action='store', dest='fft3_home',
                   help='Specify the FFT3 Home - where the FFT3 library is installed')
    opt.add_option('--disable-fft', action='store_false', dest='enable_fft',
                   help='turn off building FFT (default)')
    opt.add_option('--enable-fft', action='store_true',
                   default=True, help='turn on FFT')
    opt.add_option('--enable-fft-double', action='store_true', dest='fft_double',
                   default=False, help='turn on double precision FFT')

    # changed this to be the default, so we always build statically
    opt.add_option('--build-fft', action='store_true', dest="build_fft",
                   default=True, help='force building FFT library (fftw) from scratch')
    opt.add_option('--nobuild-fft', action='store_false', dest="build_fft",
                   help='force building FFT library (fftw) from scratch')

def configure(conf):
    #-- FFT --------------------------------------------------------------------
    enableFFT = Options.options.enable_fft
    if not enableFFT:
        if Options.options.fft_home or Options.options.fft3_home:
            enableFFT = True
    
    if enableFFT:
        makeFFT = Options.options.build_fft
        fftHome = Options.options.fft_home
        fft3Home = Options.options.fft3_home
        fftDouble = Options.options.fft_double
        foundLocal = False
        foundLocalFFT3 = False


        # FFTW2
        if not fftHome:
            if not makeFFT:
                if not conf.check_cc(lib='fftw', mandatory=False, uselib_store='FFT'):
                    #see if they defined env vars
                    fftHome = os.environ.get('FFT_HOME', None)
                else:
                    foundLocal = True

        if not foundLocal:
            makeFFT = False
            if fftHome:
                conf.msg('Setting fft home', fftHome)
                conf.env.append_value('LIBPATH_FFT', os.path.join(fftHome, 'lib'))
                conf.env.append_value('CPPPATH_FFT', os.path.join(fftHome, 'include'))
            else:
                #we must use/build the local one
                makeFFT = True

        if fftDouble:
            makeFFT = True
            conf.env['MAKE_FFT_DOUBLE'] = True
            conf.env.defines['ENABLE_FFT_DOUBLE'] = 1
        else:
            conf.env['MAKE_FFT_DOUBLE'] = False

        if makeFFT and not foundLocal:
            conf.env['MAKE_FFT'] = True
            conf.msg('Building local lib', 'fftw')

        # FFTW3
        if not fft3Home:
            if not conf.check_cc(header_name='fftw/fftw3.h', lib='fftw3f', mandatory=False, uselib_store='FFT3'):
                #see if they defined env vars
                fft3Home = os.environ.get('FFT3_HOME', None)
            else:
                foundLocalFFT3 = True
                conf.env.append_value('LIB_FFT3', 'fftw3f')
                conf.env.append_unique('CXXDEFINES_FFT3', ['HAVE_FFTW3'])
                conf.env['HAVE_FFTW3'] = True

        if not foundLocalFFT3:
            if fft3Home:
                conf.msg('Setting fft3 home', fft3Home)
                conf.env.append_value('LIBPATH_FFT3', os.path.join(fft3Home, 'lib'))
                conf.env.append_value('CPPPATH_FFT3', os.path.join(fft3Home, 'include'))
                conf.env.append_value('LIB_FFT3', 'fftw3f')
                conf.env.append_unique('CXXDEFINES_FFT3', ['HAVE_FFTW3'])
                conf.env['HAVE_FFTW3'] = True

def build(bld):
    variant = bld.env['VARIANT']
    env = bld.env_of_name(variant)
    env.set_variant(variant)

    driversNode = bld.path
    
    if 'MAKE_FFT' in env:
        
        fname = 'fftw-2.1.5'
        bld.set_group(0)
        ut = bld.new_task_gen(path=bld.path, env=env.copy(),
                              fname='%s.tar' % fname)
        bld.set_group(1)
        ut.features = ['untar']
        #bld.add_group()
        
        driverNode = driversNode.make_node(fname)
        
        #create fftw.h
        fftwH = bld.new_task_gen(input='fftw/fftw.h.in',
                                 output='fftw/fftw.h',
                                 path=driverNode,
                                 env=env.copy())
        fftwH.features = ['commentUndefs']
        
        envDefs = env['DEFINES']
        d, u = {}, []
        for line in envDefs:
            split = line.split('=')
            k = split[0]
            v = len(split) == 2 and split[1] or '1'
            if v:
                d[k] = v
            else:
                u.append(k)

        d['FFTW_VERSION'] = '"2.1.5"'
        if not env['MAKE_FFT_DOUBLE']:
            d['FFTW_ENABLE_FLOAT'] = '1'

        configH = bld.new_task_gen(output='fftw/config.h',
                                   path=driverNode,
                                   defs=d,
                                   env=env.copy(),
                                   undefs=u)
        configH.features = ['makeHeader']
        
        #bld.add_group()
        
        #copied from fftw Makefile
        NOTW_CODELETS = 'fn_1.c fn_2.c fn_3.c fn_4.c fn_5.c fn_6.c fn_7.c fn_8.c fn_9.c fn_10.c fn_11.c fn_12.c fn_13.c fn_14.c fn_15.c fn_16.c fn_32.c fn_64.c'
        TWID_CODELETS = 'ftw_2.c ftw_3.c ftw_4.c ftw_5.c ftw_6.c ftw_7.c ftw_8.c ftw_9.c ftw_10.c ftw_16.c ftw_32.c ftw_64.c'
        NOTWI_CODELETS = 'fni_1.c fni_2.c fni_3.c fni_4.c fni_5.c fni_6.c fni_7.c fni_8.c fni_9.c fni_10.c fni_11.c fni_12.c fni_13.c fni_14.c fni_15.c fni_16.c fni_32.c fni_64.c'
        TWIDI_CODELETS = 'ftwi_2.c ftwi_3.c ftwi_4.c ftwi_5.c ftwi_6.c ftwi_7.c ftwi_8.c ftwi_9.c ftwi_10.c ftwi_16.c ftwi_32.c ftwi_64.c'
        OTHERSRC = 'timer.c config.c planner.c twiddle.c executor.c ' \
               'generic.c fftwnd.c malloc.c wisdom.c wisdomio.c putils.c rader.c ' \
                   'fftwf77.c'
        
        if env['CC_NAME'] == 'msvc' and env['LIB_TYPE'] == 'shlib':
            defs = ['BUILD_FFTW_DLL']
        else:
            defs = []
        
        sources = map(lambda s: 'fftw/%s' % s,
                      ' '.join([NOTW_CODELETS, TWID_CODELETS, NOTWI_CODELETS, TWIDI_CODELETS, OTHERSRC]).split())
        fftw = bld.new_task_gen(features='c c%s' % env['LIB_TYPE'] or 'stlib', source=sources,
                                export_includes=['fftw'],
                                target='fftw', path=driverNode,
                                includes=['fftw'], install_path='${PREFIX}/lib',
                                name='FFT', defines=env['DEFINES'] + defs, env=env.copy())

        NOTW_CODELETS = 'frc_1.c frc_2.c frc_3.c frc_4.c frc_5.c frc_6.c frc_7.c frc_8.c frc_9.c frc_10.c frc_11.c frc_12.c frc_13.c frc_14.c frc_15.c frc_16.c frc_32.c frc_64.c frc_128.c'
        TWID_CODELETS = 'fhf_2.c fhf_3.c fhf_4.c fhf_5.c fhf_6.c fhf_7.c fhf_8.c fhf_9.c fhf_10.c fhf_16.c fhf_32.c'
        NOTWI_CODELETS = 'fcr_1.c fcr_2.c fcr_3.c fcr_4.c fcr_5.c fcr_6.c fcr_7.c fcr_8.c fcr_9.c fcr_10.c fcr_11.c fcr_12.c fcr_13.c fcr_14.c fcr_15.c fcr_16.c fcr_32.c fcr_64.c fcr_128.c'
        TWIDI_CODELETS = 'fhb_2.c fhb_3.c fhb_4.c fhb_5.c fhb_6.c fhb_7.c fhb_8.c fhb_9.c fhb_10.c fhb_16.c fhb_32.c'
        OTHERSRC = 'rconfig.c rplanner.c rexec.c rexec2.c rfftwnd.c rgeneric.c  rfftwf77.c'
        
        sources = map(lambda s: 'rfftw/%s' % s,
                      ' '.join([NOTW_CODELETS, TWID_CODELETS, NOTWI_CODELETS, TWIDI_CODELETS, OTHERSRC]).split())
        rfftw = bld.new_task_gen(features='c c%s' % env['LIB_TYPE'] or 'stlib', source=sources,
                                export_includes=['fftw', 'rfftw'],
                                target='rfftw', path=driverNode,
                                includes=['fftw', 'rfftw'],
                                use='FFT', name='RFFT',
                                defines=env['DEFINES'] + defs, env=env.copy(),
                                install_path='${PREFIX}/lib')

        bld(features='install_tgt', install_path='${PREFIX}/include',
            dir=driverNode, files=['fftw/fftw.h', 'rfftw/rfftw.h'], name='fftw_install')

def distclean(context):
    #remove the untarred directories
    import shutil
    
    dirs = map(lambda d: os.path.join(context.path.abspath(), d),
               ['fftw-2.1.5'])
    for d in dirs:
        try:
            if os.path.exists(d):
                shutil.rmtree(d, ignore_errors=True)
        except:{}
    
