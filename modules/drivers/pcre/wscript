import os
import Options
from TaskGen import feature, before, taskgen
import Tools.misc as misc

def set_options(opt):
    opt.add_option('--disable-pcre', action='store_false', dest='enable_pcre',
                   help='turn off PCRE')
    opt.add_option('--enable-pcre', action='store_true',
                   default=True, help='turn on PCRE (default)')
    opt.add_option('--with-pcre-home', action='store',
                   help='Specify the PCRE Home - where PCRE is installed to')
    opt.add_option('--build-pcre', action='store_true', dest='build_pcre',
                   default=True, help='force building PCRE from scratch')
    opt.add_option('--nobuild-pcre', action='store_false', dest='build_pcre',
                   help='force building PCRE from scratch')

def configure(conf):
    #-- PCRE -------------------------------------------------------------------
    enablePCRE = Options.options.enable_pcre
    
    if enablePCRE:
        pcreHome = Options.options.with_pcre_home
        makePCRE = False
        if Options.options.build_pcre:
            makePCRE = True
        elif pcreHome:
            conf.check_message_2('setting pcre home to %s' % pcreHome)
            conf.env.append_value('LIBPATH_PCRE', os.path.join(pcreHome, 'lib'))
            conf.env.append_value('CPPPATH_PCRE', os.path.join(pcreHome, 'include'))
        else:
            if not conf.check_cxx(lib='pcre', mandatory=False,
                                  uselib_store='PCRE'):
                #default to building locally
                makePCRE = True
        if makePCRE:
            conf.env['MAKE_PCRE'] = makePCRE
            conf.check_message_1('Building local lib')
            conf.check_message_2('pcre')
        else:
            conf.env['LIB_PCRE'] = ['pcre']

def build(bld):
    variant = bld.env['VARIANT']
    env = bld.env_of_name(variant)
    env.set_variant(variant)

    defs = env['defines']
    defList = []
    for k, v in defs.iteritems():
        if v:
            defList.append('%s=%s' % (k, v))
    #defs = map(lambda t: '%s=%s' % t, [(k, v) for k, v in bld.env['defines'].iteritems()])

    driversNode = bld.path
    
    if 'MAKE_PCRE' in env:
        fname = 'pcre-5.0'
        ut = bld.new_task_gen(path=bld.path, env=env.copy(),
                              fname='%s.tar' % fname, before='config_h')
        ut.features = ['untar']
        bld.add_group()
        
        driverNode = driversNode.ensure_dir_node_from_path(fname)
        
        #we need to do a few substitution transformations
        #these taken from the configure.in in the package
        pcreDict = dict(PCRE_MAJOR=5, PCRE_MINOR=0, PCRE_DATE='13-Sep-2004',
                        MATCH_LIMIT=10000000, POSIX_MALLOC_THRESHOLD=10,
                        HAVE_STRERROR=env['HAVE_STRERROR'],
                        HAVE_MEMMOVE=env['HAVE_MEMMOVE'],
                        HAVE_BCOPY=env['HAVE_BCOPY'],
                        EBCDIC=0, NEWLINE="'\\n'", LINK_SIZE=2,
                        EXPORT=None)
        
        configH = bld.new_task_gen(name='config_h', output='config.h',
                                   path=driverNode, env=env.copy(),
                                   defs=pcreDict, before='pcre_in')
        configH.features = ['makeHeader']
        
        pcreH = bld.new_task_gen(name='pcre_in', input='pcre.in', output='pcre.h', env=env.copy(),
                                 dict=pcreDict, path=driverNode, before='dftables')
        pcreH.features = ['m4subst']
        bld.add_group()
        
        #make the dftables executable
        dfTables = bld.new_task_gen('cc', 'program', source='dftables.c',
                                    includes=['.'],
                                    target='dftables',
                                    path=driverNode,
                                    install_path=None,
                                    env=env.copy(), before='chartables')
        bld.add_group()
        
        appName = Options.platform.startswith('win32') and 'dftables.exe' or 'dftables'
        charTables = bld.new_task_gen(source=appName, path=driverNode,
                                      rule='${SRC} "%s/chartables.c"' % driverNode.abspath(),
                                      install_path=None,
                                      env=env.copy(), before='pcre')
        bld.add_group()
        
        
        pcreposix = bld.new_task_gen('cc', env['LIB_TYPE'] or 'staticlib',
                         includes=['.'], env=env.copy(),
                         target='pcreposix', source='pcreposix.c',
                         path=driverNode, export_incdirs='.')
    
        pcre = bld.new_task_gen('cc', env['LIB_TYPE'] or 'staticlib',
                         includes=['.'],
                         export_incdirs='.',
                         target='pcre',
                         source='maketables.c get.c study.c pcre.c',
                         path=driverNode,
                         env=env.copy(),
                         name='PCRE',
                         install_path='${PREFIX}/lib')
        bld.add_group()
 
        bld.install_files('${PREFIX}/include',
                          map(lambda x: os.path.join(driverNode.abspath(), x),
                              'pcre.h pcreposix.h'.split()))


def distclean(context):
    #remove the untarred directories
    import shutil
    
    dirs = map(lambda d: os.path.join(context.curdir, d),
               ['pcre-5.0'])
    for d in dirs:
        try:
            if os.path.exists(d):
                shutil.rmtree(d, ignore_errors=True)
        except:{}
    
