import os
import Options
from TaskGen import feature, before, taskgen
import Tools.misc as misc


def set_options(opt):
    opt.add_option('--enable-sql-layer', action='store', choices=['mysql', 'psql', 'oracle'],
                   dest='sql_layer', default=None, help='Specify the SQL layer')
    opt.add_option('--with-sql-home', action='store', dest='sql_home',
                   help='Specify the SQL Home - where the SQL library is installed to')

def configure(conf):
    #-- SQL --------------------------------------------------------------------
    sqlLayer = Options.options.sql_layer

    if sqlLayer:
        sqlHome = Options.options.sql_home
        
        conf.check_message_1('Enabling SQL layer')
        conf.check_message_2(sqlLayer)
        
        if sqlHome:
            conf.check_message_1('Setting sql home')
            conf.check_message_2(sqlHome)
            if sqlLayer == 'mysql':
                conf.env.append_value('LIBPATH_SQL', os.path.join(sqlHome, 'lib/mysql'))
                conf.env.append_value('CPPPATH_SQL', os.path.join(sqlHome, 'include/mysql'))
            else:
                conf.env.append_value('LIBPATH_SQL', os.path.join(sqlHome, 'lib'))
                conf.env.append_value('CPPPATH_SQL', os.path.join(sqlHome, 'include'))
        
        if sqlLayer == 'mysql':
            if not sqlHome:
                conf.env.append_value('LIBPATH_SQL', os.path.join('/usr/lib', 'mysql'))
                conf.env.append_value('CPPPATH_SQL', os.path.join('/usr/include', 'mysql'))
            conf.env.append_value('CXXFLAGS_SQL', '-DUSE_MYSQL')
            conf.env['LIB_SQL'] = ['mysqlclient_r']
        elif sqlLayer == 'psql':
            conf.env.append_value('CXXFLAGS_SQL', '-DUSE_PGSQL')
            conf.env['LIB_SQL'] = ['psql']
        elif sqlLayer == 'oracle':
            conf.env.append_value('CXXFLAGS_SQL', '-DUSE_ORACLE')
            conf.env['LIB_SQL'] = ['clntsh']

