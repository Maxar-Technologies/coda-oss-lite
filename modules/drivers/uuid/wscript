import os
import Options
from TaskGen import feature, before, task_gen


def options(opt):
    if Options.platform != 'win32':
        opt.add_option('--disable-uuid', action='store_false', dest='enable_uuid',
                       help='will not build the uuid library')
        opt.add_option('--enable-uuid', action='store_true',
                       default=True, help='will build the uuid library if not found on the system (default)')
        opt.add_option('--build-uuid', action='store_true', dest='build_uuid',
                       default=True, help='force building libuuid from scratch')
        opt.add_option('--nobuild-uuid', action='store_false', dest='build_uuid',
                       help='force building libuuid from scratch')
        opt.add_option('--with-uuid-home', action='store', dest='uuid_home',
                   help='Specify the UUID lib/headers home')


def configure(conf):
    #-- UUID -------------------------------------------------------------------
    if Options.platform != 'win32' and Options.options.enable_uuid:
        uuid_home = Options.options.uuid_home or '/usr'
        
        if Options.options.build_uuid or not conf.check(
                header_name='uuid/uuid.h', lib='uuid',
                function_name='uuid_generate', uselib_store='UUID',
                libpath=os.path.join(uuid_home, 'lib'),
                includes=os.path.join(uuid_home, 'include')):
            conf.env['MAKE_UUID'] = True
            conf.msg('Building local lib', 'uuid')

def build(bld):
    variant = bld.env['VARIANT']
    env = bld.env_of_name(variant)
    env.set_variant(variant)

    driversNode = bld.path
        
    if 'MAKE_UUID' in env:
        
        fname = 'e2fsprogs-1.40-uuid'
        bld.set_group(0)
        ut = bld.new_task_gen(path=bld.path, fname='%s.tar' % fname, env=env.copy())
        bld.set_group(1)
        ut.features = ['untar']
        #bld.add_group()
        
        driverNode = driversNode.make_node(fname)
        
        uuidH = bld.new_task_gen(input='lib/uuid/uuid_types.h.in',
                                 output='lib/uuid/uuid_types.h',
                                 dict=env['defines'], path=driverNode,
                                 env=env.copy())
        uuidH.features = ['m4subst']
    
        sources = map(lambda x: 'lib/uuid/%s' % x,
                    'clear.c compare.c copy.c gen_uuid.c isnull.c pack.c parse.c ' \
                      'unpack.c unparse.c uuid_time.c'.split())
        uuid = bld.new_task_gen(features='c c%s' % env['LIB_TYPE'] or 'stlib',
                                source=sources,
                                export_includes='lib',
                                includes='lib',
                                target='uuid',
                                name='UUID', path=driverNode,
                                env=env.copy(), defines=env['DEFINES'],
                                install_path='${PREFIX}/lib')
        
        bld(features='install_tgt', install_path='${PREFIX}/include/uuid',
                          dir=driverNode, pattern='lib/uuid/uuid.h')

def distclean(context):
    #remove the untarred directories
    import shutil
    
    dirs = map(lambda d: os.path.join(context.path.abspath(), d),
               ['e2fsprogs-1.40-uuid'])
    for d in dirs:
        try:
            if os.path.exists(d):
                shutil.rmtree(d, ignore_errors=True)
        except:{}
    
