import os, sys
from os.path import join
from waflib import Options
from waflib.TaskGen import feature, before, task_gen
from build import untarFile

SOURCE        = 'xerces-c-3.1.1'
XERCES_DEFINES = 'USE_XERCES XERCES_STATIC_LIBRARY'

options = lambda x : None

def configure(conf):

    xmlHome = Options.options.xml_home
    xmlLayer = Options.options.xml_layer

    if xmlLayer == 'xerces' :
        conf.env.append_value('DEFINES_XML', XERCES_DEFINES.split())

        # build it with waf
        if not xmlHome :
            # check for the source tarball
            if not os.path.exists(os.path.join(conf.path.abspath(), SOURCE + '.tar')):
                conf.fatal('Missing xerces tarfile')

            conf.check_cc(header_name="netinet/in.h", mandatory=False)
            conf.check_cc(header_name="arpa/inet.h", mandatory=False)
            conf.check_cc(header_name="netdb.h", mandatory=False)
            conf.check_cc(header_name="intrin.h", mandatory=False)
            conf.check_cc(header_name="emmintrin.h", mandatory=False)
            conf.check_cc(header_name="wchar.h", mandatory=False)
            conf.check_cc(header_name="arpa/nameser_compat.h", mandatory=False)
            conf.check_cc(header_name="stdint.h", mandatory=False)
            conf.check_cc(header_name="stdio.h", mandatory=False)

            conf.check_cc(lib="nsl", mandatory=False, uselib_store='NSL')
            conf.check_cc(function_name='pathconf', header_name="unistd.h", mandatory=False)

            conf.check_cc(header_name="langinfo.h", mandatory=False)
            conf.check_cc(function_name='nl_langinfo', header_name="langinfo.h", mandatory=False)

            conf.check_cc(header_name="iconv.h", mandatory=False)
            conf.check_cc(function_name='iconv', header_name="iconv.h", mandatory=False)
            conf.check_cc(function_name='iconv_close', header_name="iconv.h", mandatory=False)
            conf.check_cc(function_name='iconv_open', header_name="iconv.h", mandatory=False)

            conf.check_cc(header_name="nl_types.h", mandatory=False)
            conf.check_cc(function_name='catclose', header_name="nl_types.h", mandatory=False)
            conf.check_cc(function_name='catclose', header_name="nl_types.h", mandatory=False)
            conf.check_cc(function_name='catgets', header_name="nl_types.h", mandatory=False)
            conf.check_cc(function_name='catopen', header_name="nl_types.h", mandatory=False)

            conf.check_cc(function_name='mblen', header_name="stdlib.h", mandatory=False)
            conf.check_cc(function_name='mbrlen', header_name="stdlib.h", mandatory=False)
            conf.check_cc(function_name='mbsrtowcs', header_name="stdlib.h", mandatory=False)
            conf.check_cc(function_name='mbstowcs', header_name="stdlib.h", mandatory=False)

            conf.check_cc(function_name='realpath', header_name="stdlib.h", mandatory=False)

            conf.check_cc(header_name="string.h", mandatory=False)
            conf.check_cc(header_name="strings.h", mandatory=False)
           
            conf.check_cc(header_name="locale.h", mandatory=False)
            conf.check_cc(function_name='localeconv', header_name="locale.h", mandatory=False)
            conf.check_cc(function_name='setlocale', header_name="locale.h", mandatory=False)

            conf.check_cc(header_name="sys/param.h", mandatory=False)
            conf.check_cc(header_name="sys/socket.h", mandatory=False)
            conf.check_cc(header_name="sys/stat.h", mandatory=False)
            conf.check_cc(header_name="sys/timeb.h", mandatory=False)
            conf.check_cc(header_name="sys/types.h", mandatory=False)
            conf.check_cc(function_name='socket', header_name="sys/socket.h", mandatory=False)
            conf.check_cc(function_name='ftime', header_name="sys/timeb.h", mandatory=False)

            conf.check_cc(header_name="ctype.h", mandatory=False)
            conf.check_cc(header_name="wctype.h", mandatory=False)
            conf.check_cc(function_name='towupper', header_name="wctype.h", mandatory=False)
            conf.check_cc(function_name='towlower', header_name="wctype.h", mandatory=False)

            conf.check_cc(function_name='wsctombs', header_name="stdlib.h", mandatory=False)
            conf.check_cc(function_name='wcsrtombs', header_name="stdlib.h", mandatory=False)

            conf.check_cc(function_name='getaddrinfo', header_name="netdb.h", mandatory=False)
            conf.check_cc(function_name='getaddrinfo', header_name="netdb.h", mandatory=False)

            conf.check_cc(header_name="cpuid.h", mandatory=False)
            conf.check_cc(header_name="endian.h", mandatory=False)
            conf.check_cc(header_name="machine/endian.h", mandatory=False)
            conf.check_cc(header_name="errno.h", mandatory=False)
            conf.check_cc(header_name="float.h", mandatory=False)
            conf.check_cc(header_name="float.h", mandatory=False)

            # untar and setup env
            conf.env['MAKE_XERCES'] = True
            conf.env['MAKE_XML']   = True
            conf.msg('Building local lib', xmlLayer)
            untarFile(path=conf.path, fname=SOURCE + '.tar')

        # use an already built version
        else :
            uselibs = 'THREAD'
            if sys.platform == 'win32':
                # Xerces also requires this standard Windows library for
                # Windows builds
                conf.check_cc(lib='advapi32', uselib_store='ADVAPI32')
                conf.env.append_value('LIB_XML', 'ADVAPI32')
                uselibs += ' ADVAPI32'
            
            # attempt to test the third party library --
            # if test fails then fail the configure
            conf.check(lib='xerces-c', uselib_store='XML',
                       header_name='xercesc/util/PlatformUtils.hpp',
                       function_name='xercesc::XMLPlatformUtils::Terminate',
                       defines='XERCES_STATIC_LIBRARY', uselib=uselibs,
                       libpath=join(xmlHome, 'lib'),
                       includes=join(xmlHome, 'include'),
                       msg='Checking for library xerces', okmsg=xmlHome,
                       mandatory=True)


def build(bld):

    env = bld.get_env()
    sourceFiles = []
    
    # check it again just in case
    if 'MAKE_XERCES' in env:
    
        xercesNode = bld.path.make_node(SOURCE)

        d = {}
        for line in env['DEFINES']:
            split = line.split('=')
            k = split[0]
            v = len(split) == 2 and split[1] or '1'
            if v:
                d[k] = v

        # extra defines for config.h
        if 'HAVE_STRING_H=1' in env['DEFINES'] :
            d['HAVE_STRCHR'] = '1'
            d['HAVE_STRDUP'] = '1'
            d['HAVE_STRICMP'] = '1'
            d['HAVE_STRRCHR'] = '1'
            d['HAVE_STRSTR'] = '1'
            d['HAVE_STRTOL'] = '1'
            d['HAVE_STRTOUL'] = '1'
        if 'HAVE_STRINGS_H=1' in env['DEFINES'] :
            d['HAVE_STRCASECMP'] = '1'
        if 'HAVE_ICONV_H=1' in env['DEFINES'] :
            d['ICONV_USES_CONST_POINTER'] = '0'
        if 'HAVE_SYS_TIME_H=1' in env['DEFINES'] and 'HAVE_TIME_H=1' in env['DEFINES']:
            d['TIME_WITH_SYS_TIME'] = '1'

        if 'HAVE_SYS_TYPES_H=1HAVE_SYS_TYPES=1' in env['DEFINES'] :
            d['XERCES_HAVE_SYS_TYPES_H'] = '1'
        if 'HAVE_INTTYPES_H=1' in env['DEFINES'] :
            d['XERCES_HAVE_INTTYPES_H'] = '1'
            d['XERCES_SSIZE_T']    = 'ssize_t'
        else :
            d['XERCES_HAVE_INTTYPES_H'] = '0'
            d['XERCES_SSIZE_T']    = 'long'
        if 'HAVE_INTRIN_H=1' in env['DEFINES'] :
            d['XERCES_HAVE_INTRIN_H'] = '1'
        if 'HAVE_EMMINTRIN_H=1' in env['DEFINES'] :
            d['XERCES_HAVE_EMMINTRIN_H'] = '1'
        if 'HAVE_WCHAR_H=1' in env['DEFINES'] :
            d['XERCES_INCLUDE_WCHAR_H'] = '1'
        if sys.platform == 'win32' :
            d['XERCES_USE_FILEMGR_WINDOWS']     = '1' 
            d['XERCES_USE_MUTEXMGR_WINDOWS']    = '1'
            d['XERCES_USE_NETACCESSOR_WINSOCK'] = '1'
            d['XERCES_USE_TRANSCODER_WINDOWS']  = '1'
            
        else :
            d['HAVE_PTHREAD'] = '1'

            d['XERCES_USE_FILEMGR_POSIX'] = '1'
            d['XERCES_USE_MUTEXMGR_POSIX'] = '1'
            d['XERCES_USE_MSGLOADER_INMEMORY'] = '1'
            d['XERCES_USE_TRANSCODER_GNUICONV'] = '1'

        d['XERCES_S16BIT_INT'] = 'int16_t'
        d['XERCES_S32BIT_INT'] = 'int32_t'
        d['XERCES_S64BIT_INT'] = 'int64_t'
        d['XERCES_U16BIT_INT'] = 'uint16_t'
        d['XERCES_U32BIT_INT'] = 'uint32_t'
        d['XERCES_U64BIT_INT'] = 'uint64_t'
        d['XERCES_XMLCH_T']    = 'uint16_t'
        d['XERCES_SIZE_T']     = 'size_t'

        d['LT_OBJDIR'] = '.libs/'
        d['PACKAGE'] = 'xerces-c' 
        d['PACKAGE_BUGREPORT'] = '' 
        d['PACKAGE_NAME'] = 'xerces-c'
        d['PACKAGE_STRING'] = 'xerces-c 3.1.1'
        d['PACKAGE_TARNAME'] = 'xerces-c'
        d['PACKAGE_URL'] = '' 
        d['PACKAGE_VERSION'] = '3.1.1'
        d['VERSION'] = '3.1.1'
        
        # extra defines for Xerces_autoconf_config.hpp
        d['HAVE_NAMESPACES'] = '1'
        d['HAVE_SOCKET'] = '1'
        d['HAVE_STD_LIBS'] = '1'
        d['HAVE_STD_NAMESPACE'] = '1'
                
        d['XERCES_AUTOCONF'] = '1'
        d['XERCES_PLATFORM_EXPORT'] = ''
        d['XERCES_PLATFORM_IMPORT'] = ''
        d['XERCES_HAS_CPP_NAMESPACE'] = '1'
        d['XERCES_STD_NAMESPACE'] = '1'
        d['XERCES_NEW_IOSTREAMS'] = '1'
        d['XERCES_LSTRSUPPORT'] = '1'

        d['HAVE_BOOL'] = '1'
        d['XERCES_HAVE_SSE2_INTRINSIC'] = '1'

        if 'HAVE_NL_TYPES_H=1' in env['DEFINES'] :
            d['HAVE_CATCLOSE'] = '1'
            d['HAVE_CATGETS']  = '1'
            d['HAVE_CATOPEN']  = '1'

        print d

        # first setup the configurable headers
        xercesAutoH = bld(input='src/xercesc/util/Xerces_autoconf_config.hpp.in',
                          output='src/xercesc/util/Xerces_autoconf_config.hpp',
                          defs=d, path=xercesNode,
                          env=env.derive())
        xercesAutoH.features = ['handleDefs']

        xercesConfigH = bld(input='config.h.in',
                            output='config.h',
                            defs=d, path=xercesNode,
                            env=env.derive())
        xercesConfigH.features = ['handleDefs']
    
#        xercesDefs = ['PACKAGE="xerces-c"', 'PACKAGE_NAME="xerces-c"',
#                      'PACKAGE_STRING="xerces-c 3.1.1"', 'PACKAGE_TARNAME="xerces-c"',
#                      'PACKAGE_VERSION="3.1.1"', 'VERSION="3.1.1"']
#                      'XERCES_AUTOCONF=1', 'XERCES_HAS_CPP_NAMESPACE=1',
#                      'XERCES_HAVE_EMMINTRIN_H=1', 'XERCES_HAVE_INTTYPES_H=1',
#                      'XERCES_HAVE_SSE2_INTRINSIC=1', 'XERCES_HAVE_SYS_TYPES_H=1',
#                      'XERCES_LSTRSUPPORT=1', 'XERCES_NEW_IOSTREAMS=1',
#                      'XERCES_PLATFORM_EXPORT', 'XERCES_PLATFORM_IMPORT',
#                      'XERCES_S16BIT_INT=int16_t', 'XERCES_S32BIT_INT=int32_t',
#                      'XERCES_S64BIT_INT=int64_t', 'XERCES_SIZE_T=size_t',
#                      'XERCES_SSIZE_T=ssize_t', 'XERCES_STD_NAMESPACE=1',
#                      'XERCES_U16BIT_INT=uint16_t', 'XERCES_U32BIT_INT=uint32_t',
#                      'XERCES_U64BIT_INT=uint64_t', 'XERCES_USE_MSGLOADER_INMEMORY=1', 
#                      'XERCES_USE_TRANSCODER_GNUICONV=1', 'XERCES_XMLCH_T=uint16_t',
#                      'XERCES_USE_FILEMGR_POSIX=1', 'XERCES_USE_MUTEXMGR_POSIX=1',
#                      'XERCES_USE_NETACCESSOR_SOCKET=1', 'XERCES_USE_NETACCESSOR_CFURL=0']

#                      'XERCES_USE_FILEMGR_POSIX=1', 'XERCES_USE_FILEMGR_WINDOWS=1', 
                      
#                      'XERCES_USE_MUTEXMGR_WINDOWS=1', 'XERCES_USE_MUTEXMGR_POSIX=1',
                      
#                      'XERCES_USE_NETACCESSOR_CURL=1' ,'XERCES_USE_NETACCESSOR_SOCKET=1'
#                      'XERCES_USE_NETACCESSOR_CFURL=1', 'XERCES_USE_NETACCESSOR_WINSOCK=1'

#                      'XERCES_USE_TRANSCODER_GNUICONV=1' ,'XERCES_USE_TRANSCODER_MACOSUNICODECONVERTER=1'
#                      'XERCES_USE_TRANSCODER_WINDOWS=1'

#WINDOWS SPECIFIC
#         _CRT_SECURE_NO_DEPRECATE;NDEBUG;WIN32;_WINDOWS;XERCES_BUILDING_LIBRARY;XERCES_USE_TRANSCODER_WINDOWS;XERCES_USE_WIN32_MSGLOADER;XERCES_USE_NETACCESSOR_WINSOCK;XERCES_USE_FILEMGR_WINDOWS;XERCES_USE_MUTEXMGR_WINDOWS;XERCES_PATH_DELIMITER_BACKSLASH;HAVE_STRICMP;HAVE_STRNICMP;HAVE_LIMITS_H;HAVE_SYS_TIMEB_H;HAVE_FTIME;HAVE_WCSUPR;HAVE_WCSLWR;HAVE_WCSICMP;HAVE_WCSNICMP"             

        GENERAL_EXCLUDES = ['ICUTransService.cpp', 'IconvTransService.cpp', 
                            'CurlURLInputStream.cpp', 'CurlNetAccessor.cpp', 
                            'InMemMsgLoader.cpp', 'ICUMsgLoader.cpp']
        MAC_SPECIFIC =  ['MacOSUnicodeConverter.cpp', 'MacOSURLAccessCF.cpp',
                         'URLAccessCFBinInputStream.cpp', 'PosixFileMgr.cpp',
                         'PosixMutexMgr.cpp']
        UNIX_SPECIFIC = ['IconvGNUTransService.cpp', 'SocketNetAccessor.cpp',
                         'UnixHTTPURLInputStream.cpp', 'BinHTTPInputStreamCommon.cpp',
                         'PosixFileMgr.cpp PosixMutexMgr.cpp']
        WIN_SPECIFIC =  ['Win32TransService.cpp', 'WinSockNetAccessor.cpp',
                         'BinHTTPURLInputStream.cpp', 'BinHTTPInputStreamCommon.cpp',
                         'WindowsFileMgr.cpp', 'WindowsMutexMgr.cpp', 
                         'Win32MsgLoader.cpp']

        # filter out the system specific files                        
        EXCLUDES = []
        if sys.platform == 'win32' :
            EXCLUDES += GENERAL_EXCLUDES + MAC_SPECIFIC + UNIX_SPECIFC
        elif sys.platform.startswith('lin') :
            EXCLUDES += GENERAL_EXCLUDES + MAC_SPECIFIC + WIN_SPECIFIC
        else :
            # could support mac here as well
            bld.fatal('Unsupported platform for building Xerces-c')

        # walk the directory and all files --
        # this sorts files based on the filtering above, and
        # whether they are sources vs headers
        sources = []
        headers = []
        xercesDir = join(bld.path.abspath(), SOURCE)
        for root,dirs,files in os.walk(join(xercesDir, 'src')) :
            relativePath = root.replace(xercesDir + os.sep, "")
            for file in files :
                if file.endswith('.cpp') and 'Test' not in file and file not in EXCLUDES :
                    sources.append(join(relativePath, file))
                if file.endswith('.h') :
                    headers.append(join(relativePath, file))
        sources = ' '.join(sources)
        
        features = 'c c%s' % env['LIB_TYPE'] or 'stlib'
        if env['install_headers'] or env['install_source']:
            features += ' add_targets'

        xerces = bld(features=features, source=sources,
                    includes='src', export_includes='src',
                    target='xerces-c', path=xercesNode,
                    uselib='XML SOCKET', name='XML', env=env.derive(),
                    defines=env['DEFINES'])
        xerces.targets_to_add = [xercesAutoH, xercesConfigH]
        if env['install_libs']:
            xerces.install_path = '${PREFIX}/lib'

        if env['CC_NAME'] == 'msvc' and env['LIB_TYPE'] == 'shlib':
            xerces.defs = 'lib/libxerces.def'
        
        if env['install_headers']:
            bld(features='install_tgt', install_path='${PREFIX}/include',
                dir=xercesNode, files=headers, 
                name='XML_HEADERS_INSTALL')
            xerces.targets_to_add += ['XML_HEADERS_INSTALL']

        if env['install_source']:
            sourceNode = bld.path.make_node('source')
            bld.install_tgt(files=SOURCE + '.tar',
                            dir=bld.path,
                            install_path=os.path.join('${PREFIX}',
                            sourceNode.path_from(bld.path)),
                            relative_trick=True,
                            name='XML_SOURCE_INSTALL')            
            xerces.targets_to_add += ['XML_SOURCE_INSTALL']

def distclean(context):

    # remove the untarred directories
    import shutil
    dirs = filter(lambda x: exists(join(opt.path.abspath(), x)), 
                  ['xerces-c.3.1.1'])
    for d in dirs:
        try:
            shutil.rmtree(d, ignore_errors=True)
        except:{}
    
