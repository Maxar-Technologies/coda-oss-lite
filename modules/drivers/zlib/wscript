import os
import Options
from TaskGen import feature, before, task_gen


def options(opt):
    opt.add_option('--with-zip-home', action='store', dest='zip_home',
                   help='Specify the ZIP Home - where the ZIP library is installed')
    opt.add_option('--disable-zip', action='store_false', dest='enable_zip',
                   help='will not build the zip (zlib) library')
    opt.add_option('--enable-zip', action='store_true',
                   default=True, help='will build the zip (libz) library if not found on the system (default)')
    opt.add_option('--build-zip', action='store_true', dest="build_zip",
                   default=True, help='force building zip (zlib) library from scratch')
    opt.add_option('--nobuild-zip', action='store_false', dest="build_zip",
                   help='force building zip (zlib) library from scratch')

def configure(conf):
    #-- ZIP --------------------------------------------------------------------
    enableZip = Options.options.enable_zip
    
    if enableZip:
        zipHome = Options.options.zip_home
        makeZip = False
        if Options.options.build_zip:
            makeZip = True
        elif zipHome:
            conf.msg('Setting zip home', zipHome)
            conf.env.append_value('LIBPATH_ZIP', os.path.join(zipHome, 'lib'))
            conf.env.append_value('CPPPATH_ZIP', os.path.join(zipHome, 'include'))
        else:
            if not conf.check(header_name='zlib.h', define_name='HAVE_ZLIB_H',
                              lib='z', uselib_store='ZIP'):
                #default to building locally
                makeZip = True
        if makeZip:
            conf.env['MAKE_ZIP'] = makeZip
            conf.msg('Building local lib', 'zip (zlib)')
        else:
            conf.env['LIB_ZIP'] = ['z']

def build(bld):
    variant = bld.env['VARIANT']
    env = bld.env_of_name(variant)
    env.set_variant(variant)

    driversNode = bld.path
    
    if 'MAKE_ZIP' in env:
        fname = 'zlib-1.2.3'
        bld.set_group(0)
        ut = bld.new_task_gen(path=bld.path, env=env.copy(),
                              fname='%s.tar' % fname)
        bld.set_group(1)
        ut.features = ['untar']
        #bld.add_group()
        
        driverNode = driversNode.make_node(fname)
        
        if env['CC_NAME'] == 'msvc' and env['LIB_TYPE'] == 'shlib':
            defs = ['ZLIB_DLL']
        else:
            defs = []
        
        zlib = bld.new_task_gen(features='c c%s' % env['LIB_TYPE'] or 'stlib',
                         includes=['.'],
                         export_includes='.',
                         target='z',
                         source='adler32.c compress.c crc32.c gzio.c uncompr.c deflate.c trees.c ' \
                                'zutil.c inflate.c infback.c inftrees.c inffast.c',
                         path=driverNode,
                         defines=env['DEFINES'] + defs,
                         env=env.copy(),
                         name='ZIP',
                         install_path='${PREFIX}/lib')
        
        bld(features='install_tgt', install_path='${PREFIX}/include',
                          dir=driverNode, pattern='zlib.h')

def distclean(context):
    #remove the untarred directories
    import shutil
    
    dirs = map(lambda d: os.path.join(context.path.abspath(), d),
               ['zlib-1.2.3'])
    for d in dirs:
        try:
            if os.path.exists(d):
                shutil.rmtree(d, ignore_errors=True)
        except:{}
    
