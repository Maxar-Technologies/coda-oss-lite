# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _coda_except
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class Context(_object):
    """Proxy of C++ Context class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Context, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, std::string file, int line, std::string func, std::string time, 
            std::string message) -> Context
        __init__(self, Context c) -> Context
        """
        this = _coda_except.new_Context(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMessage(*args):
        """getMessage(self) -> std::string"""
        return _coda_except.Context_getMessage(*args)

    def getTime(*args):
        """getTime(self) -> std::string"""
        return _coda_except.Context_getTime(*args)

    def getFunction(*args):
        """getFunction(self) -> std::string"""
        return _coda_except.Context_getFunction(*args)

    def getFile(*args):
        """getFile(self) -> std::string"""
        return _coda_except.Context_getFile(*args)

    def getLine(*args):
        """getLine(self) -> int"""
        return _coda_except.Context_getLine(*args)

    __swig_setmethods__["mMessage"] = _coda_except.Context_mMessage_set
    __swig_getmethods__["mMessage"] = _coda_except.Context_mMessage_get
    if _newclass:mMessage = _swig_property(_coda_except.Context_mMessage_get, _coda_except.Context_mMessage_set)
    __swig_setmethods__["mTime"] = _coda_except.Context_mTime_set
    __swig_getmethods__["mTime"] = _coda_except.Context_mTime_get
    if _newclass:mTime = _swig_property(_coda_except.Context_mTime_get, _coda_except.Context_mTime_set)
    __swig_setmethods__["mFunc"] = _coda_except.Context_mFunc_set
    __swig_getmethods__["mFunc"] = _coda_except.Context_mFunc_get
    if _newclass:mFunc = _swig_property(_coda_except.Context_mFunc_get, _coda_except.Context_mFunc_set)
    __swig_setmethods__["mFile"] = _coda_except.Context_mFile_set
    __swig_getmethods__["mFile"] = _coda_except.Context_mFile_get
    if _newclass:mFile = _swig_property(_coda_except.Context_mFile_get, _coda_except.Context_mFile_set)
    __swig_setmethods__["mLine"] = _coda_except.Context_mLine_set
    __swig_getmethods__["mLine"] = _coda_except.Context_mLine_get
    if _newclass:mLine = _swig_property(_coda_except.Context_mLine_get, _coda_except.Context_mLine_set)
    __swig_destroy__ = _coda_except.delete_Context
    __del__ = lambda self : None;
Context_swigregister = _coda_except.Context_swigregister
Context_swigregister(Context)

class Throwable(_object):
    """Proxy of C++ Throwable class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Throwable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Throwable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Throwable
        __init__(self, std::string message) -> Throwable
        __init__(self, Context c) -> Throwable
        __init__(self, Throwable t, Context c) -> Throwable
        """
        this = _coda_except.new_Throwable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coda_except.delete_Throwable
    __del__ = lambda self : None;
    def getMessage(*args):
        """getMessage(self) -> std::string"""
        return _coda_except.Throwable_getMessage(*args)

    def getTrace(*args):
        """
        getTrace(self) -> Trace
        getTrace(self) -> Trace
        """
        return _coda_except.Throwable_getTrace(*args)

    def getType(*args):
        """getType(self) -> std::string"""
        return _coda_except.Throwable_getType(*args)

    def toString(*args):
        """toString(self) -> std::string"""
        return _coda_except.Throwable_toString(*args)

Throwable_swigregister = _coda_except.Throwable_swigregister
Throwable_swigregister(Throwable)

class Exception(Throwable):
    """Proxy of C++ Exception class"""
    __swig_setmethods__ = {}
    for _s in [Throwable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)
    __swig_getmethods__ = {}
    for _s in [Throwable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Exception
        __init__(self, Context c) -> Exception
        __init__(self, Throwable t, Context c) -> Exception
        __init__(self, std::string message) -> Exception
        """
        this = _coda_except.new_Exception(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coda_except.delete_Exception
    __del__ = lambda self : None;
    def getType(*args):
        """getType(self) -> std::string"""
        return _coda_except.Exception_getType(*args)

Exception_swigregister = _coda_except.Exception_swigregister
Exception_swigregister(Exception)

class IOException(Exception):
    """Proxy of C++ IOException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> IOException
        __init__(self, Context c) -> IOException
        __init__(self, std::string msg) -> IOException
        __init__(self, Throwable t, Context c) -> IOException
        """
        this = _coda_except.new_IOException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coda_except.delete_IOException
    __del__ = lambda self : None;
    def getType(*args):
        """getType(self) -> std::string"""
        return _coda_except.IOException_getType(*args)

IOException_swigregister = _coda_except.IOException_swigregister
IOException_swigregister(IOException)

class FileNotFoundException(IOException):
    """Proxy of C++ FileNotFoundException class"""
    __swig_setmethods__ = {}
    for _s in [IOException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileNotFoundException, name, value)
    __swig_getmethods__ = {}
    for _s in [IOException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileNotFoundException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FileNotFoundException
        __init__(self, Context c) -> FileNotFoundException
        __init__(self, std::string msg) -> FileNotFoundException
        __init__(self, Throwable t, Context c) -> FileNotFoundException
        """
        this = _coda_except.new_FileNotFoundException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coda_except.delete_FileNotFoundException
    __del__ = lambda self : None;
    def getType(*args):
        """getType(self) -> std::string"""
        return _coda_except.FileNotFoundException_getType(*args)

FileNotFoundException_swigregister = _coda_except.FileNotFoundException_swigregister
FileNotFoundException_swigregister(FileNotFoundException)

class BadCastException(Exception):
    """Proxy of C++ BadCastException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BadCastException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BadCastException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> BadCastException
        __init__(self, Context c) -> BadCastException
        __init__(self, std::string msg) -> BadCastException
        __init__(self, Throwable t, Context c) -> BadCastException
        """
        this = _coda_except.new_BadCastException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coda_except.delete_BadCastException
    __del__ = lambda self : None;
    def getType(*args):
        """getType(self) -> std::string"""
        return _coda_except.BadCastException_getType(*args)

BadCastException_swigregister = _coda_except.BadCastException_swigregister
BadCastException_swigregister(BadCastException)

class InvalidFormatException(Exception):
    """Proxy of C++ InvalidFormatException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidFormatException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidFormatException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> InvalidFormatException
        __init__(self, Context c) -> InvalidFormatException
        __init__(self, std::string msg) -> InvalidFormatException
        __init__(self, Throwable t, Context c) -> InvalidFormatException
        """
        this = _coda_except.new_InvalidFormatException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coda_except.delete_InvalidFormatException
    __del__ = lambda self : None;
    def getType(*args):
        """getType(self) -> std::string"""
        return _coda_except.InvalidFormatException_getType(*args)

InvalidFormatException_swigregister = _coda_except.InvalidFormatException_swigregister
InvalidFormatException_swigregister(InvalidFormatException)

class IndexOutOfRangeException(Exception):
    """Proxy of C++ IndexOutOfRangeException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexOutOfRangeException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexOutOfRangeException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> IndexOutOfRangeException
        __init__(self, Context c) -> IndexOutOfRangeException
        __init__(self, std::string msg) -> IndexOutOfRangeException
        __init__(self, Throwable t, Context c) -> IndexOutOfRangeException
        """
        this = _coda_except.new_IndexOutOfRangeException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coda_except.delete_IndexOutOfRangeException
    __del__ = lambda self : None;
    def getType(*args):
        """getType(self) -> std::string"""
        return _coda_except.IndexOutOfRangeException_getType(*args)

IndexOutOfRangeException_swigregister = _coda_except.IndexOutOfRangeException_swigregister
IndexOutOfRangeException_swigregister(IndexOutOfRangeException)

class OutOfMemoryException(Exception):
    """Proxy of C++ OutOfMemoryException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutOfMemoryException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutOfMemoryException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> OutOfMemoryException
        __init__(self, Context c) -> OutOfMemoryException
        __init__(self, std::string msg) -> OutOfMemoryException
        __init__(self, Throwable t, Context c) -> OutOfMemoryException
        """
        this = _coda_except.new_OutOfMemoryException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coda_except.delete_OutOfMemoryException
    __del__ = lambda self : None;
    def getType(*args):
        """getType(self) -> std::string"""
        return _coda_except.OutOfMemoryException_getType(*args)

OutOfMemoryException_swigregister = _coda_except.OutOfMemoryException_swigregister
OutOfMemoryException_swigregister(OutOfMemoryException)

class NullPointerReferenceException(Exception):
    """Proxy of C++ NullPointerReferenceException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullPointerReferenceException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NullPointerReferenceException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> NullPointerReferenceException
        __init__(self, Context c) -> NullPointerReferenceException
        __init__(self, std::string msg) -> NullPointerReferenceException
        __init__(self, Throwable t, Context c) -> NullPointerReferenceException
        """
        this = _coda_except.new_NullPointerReferenceException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coda_except.delete_NullPointerReferenceException
    __del__ = lambda self : None;
    def getType(*args):
        """getType(self) -> std::string"""
        return _coda_except.NullPointerReferenceException_getType(*args)

NullPointerReferenceException_swigregister = _coda_except.NullPointerReferenceException_swigregister
NullPointerReferenceException_swigregister(NullPointerReferenceException)

class NoSuchKeyException(Exception):
    """Proxy of C++ NoSuchKeyException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSuchKeyException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoSuchKeyException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> NoSuchKeyException
        __init__(self, Context c) -> NoSuchKeyException
        __init__(self, std::string msg) -> NoSuchKeyException
        __init__(self, Throwable t, Context c) -> NoSuchKeyException
        """
        this = _coda_except.new_NoSuchKeyException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coda_except.delete_NoSuchKeyException
    __del__ = lambda self : None;
    def getType(*args):
        """getType(self) -> std::string"""
        return _coda_except.NoSuchKeyException_getType(*args)

NoSuchKeyException_swigregister = _coda_except.NoSuchKeyException_swigregister
NoSuchKeyException_swigregister(NoSuchKeyException)

class NoSuchReferenceException(Exception):
    """Proxy of C++ NoSuchReferenceException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSuchReferenceException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoSuchReferenceException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> NoSuchReferenceException
        __init__(self, Context c) -> NoSuchReferenceException
        __init__(self, std::string msg) -> NoSuchReferenceException
        __init__(self, Throwable t, Context c) -> NoSuchReferenceException
        """
        this = _coda_except.new_NoSuchReferenceException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coda_except.delete_NoSuchReferenceException
    __del__ = lambda self : None;
    def getType(*args):
        """getType(self) -> std::string"""
        return _coda_except.NoSuchReferenceException_getType(*args)

NoSuchReferenceException_swigregister = _coda_except.NoSuchReferenceException_swigregister
NoSuchReferenceException_swigregister(NoSuchReferenceException)

class KeyAlreadyExistsException(Exception):
    """Proxy of C++ KeyAlreadyExistsException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyAlreadyExistsException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeyAlreadyExistsException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> KeyAlreadyExistsException
        __init__(self, Context c) -> KeyAlreadyExistsException
        __init__(self, std::string msg) -> KeyAlreadyExistsException
        __init__(self, Throwable t, Context c) -> KeyAlreadyExistsException
        """
        this = _coda_except.new_KeyAlreadyExistsException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coda_except.delete_KeyAlreadyExistsException
    __del__ = lambda self : None;
    def getType(*args):
        """getType(self) -> std::string"""
        return _coda_except.KeyAlreadyExistsException_getType(*args)

KeyAlreadyExistsException_swigregister = _coda_except.KeyAlreadyExistsException_swigregister
KeyAlreadyExistsException_swigregister(KeyAlreadyExistsException)

class NotImplementedException(Exception):
    """Proxy of C++ NotImplementedException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotImplementedException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotImplementedException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> NotImplementedException
        __init__(self, Context c) -> NotImplementedException
        __init__(self, std::string msg) -> NotImplementedException
        __init__(self, Throwable t, Context c) -> NotImplementedException
        """
        this = _coda_except.new_NotImplementedException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coda_except.delete_NotImplementedException
    __del__ = lambda self : None;
    def getType(*args):
        """getType(self) -> std::string"""
        return _coda_except.NotImplementedException_getType(*args)

NotImplementedException_swigregister = _coda_except.NotImplementedException_swigregister
NotImplementedException_swigregister(NotImplementedException)

class InvalidArgumentException(Exception):
    """Proxy of C++ InvalidArgumentException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidArgumentException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidArgumentException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> InvalidArgumentException
        __init__(self, Context c) -> InvalidArgumentException
        __init__(self, std::string msg) -> InvalidArgumentException
        __init__(self, Throwable t, Context c) -> InvalidArgumentException
        """
        this = _coda_except.new_InvalidArgumentException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coda_except.delete_InvalidArgumentException
    __del__ = lambda self : None;
    def getType(*args):
        """getType(self) -> std::string"""
        return _coda_except.InvalidArgumentException_getType(*args)

InvalidArgumentException_swigregister = _coda_except.InvalidArgumentException_swigregister
InvalidArgumentException_swigregister(InvalidArgumentException)

class SerializationException(IOException):
    """Proxy of C++ SerializationException class"""
    __swig_setmethods__ = {}
    for _s in [IOException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SerializationException, name, value)
    __swig_getmethods__ = {}
    for _s in [IOException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SerializationException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SerializationException
        __init__(self, Context c) -> SerializationException
        __init__(self, std::string msg) -> SerializationException
        __init__(self, Throwable t, Context c) -> SerializationException
        """
        this = _coda_except.new_SerializationException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coda_except.delete_SerializationException
    __del__ = lambda self : None;
    def getType(*args):
        """getType(self) -> std::string"""
        return _coda_except.SerializationException_getType(*args)

SerializationException_swigregister = _coda_except.SerializationException_swigregister
SerializationException_swigregister(SerializationException)

class ParseException(IOException):
    """Proxy of C++ ParseException class"""
    __swig_setmethods__ = {}
    for _s in [IOException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParseException, name, value)
    __swig_getmethods__ = {}
    for _s in [IOException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParseException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ParseException
        __init__(self, Context c) -> ParseException
        __init__(self, std::string msg) -> ParseException
        __init__(self, Throwable t, Context c) -> ParseException
        """
        this = _coda_except.new_ParseException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coda_except.delete_ParseException
    __del__ = lambda self : None;
    def getType(*args):
        """getType(self) -> std::string"""
        return _coda_except.ParseException_getType(*args)

ParseException_swigregister = _coda_except.ParseException_swigregister
ParseException_swigregister(ParseException)



