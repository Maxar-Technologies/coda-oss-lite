# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _coda_io
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class InputStream(_object):
    """Proxy of C++ InputStream class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputStream, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    IS_EOF = _coda_io.InputStream_IS_EOF
    IS_END = _coda_io.InputStream_IS_END
    DEFAULT_CHUNK_SIZE = _coda_io.InputStream_DEFAULT_CHUNK_SIZE
    __swig_destroy__ = _coda_io.delete_InputStream
    __del__ = lambda self : None;
    def available(*args):
        """available(self) -> sys::Off_T"""
        return _coda_io.InputStream_available(*args)

    def read(*args):
        """read(self, sys::byte b, sys::Size_T len) -> sys::SSize_T"""
        return _coda_io.InputStream_read(*args)

    def readln(*args):
        """readln(self, sys::byte cStr, sys::Size_T strLenPlusNullByte) -> sys::SSize_T"""
        return _coda_io.InputStream_readln(*args)

    def streamTo(*args):
        """
        streamTo(self, OutputStream soi, sys::SSize_T numBytes=IS_END) -> sys::SSize_T
        streamTo(self, OutputStream soi) -> sys::SSize_T
        """
        return _coda_io.InputStream_streamTo(*args)

InputStream_swigregister = _coda_io.InputStream_swigregister
InputStream_swigregister(InputStream)

class OutputStream(_object):
    """Proxy of C++ OutputStream class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutputStream, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_io.delete_OutputStream
    __del__ = lambda self : None;
    def writeln(*args):
        """writeln(self, string str)"""
        return _coda_io.OutputStream_writeln(*args)

    def write(*args):
        """
        write(self, sys::byte b)
        write(self, string str)
        write(self, sys::byte b, sys::Size_T len)
        """
        return _coda_io.OutputStream_write(*args)

    def flush(*args):
        """flush(self)"""
        return _coda_io.OutputStream_flush(*args)

    def close(*args):
        """close(self)"""
        return _coda_io.OutputStream_close(*args)

OutputStream_swigregister = _coda_io.OutputStream_swigregister
OutputStream_swigregister(OutputStream)

class BidirectionalStream(InputStream,OutputStream):
    """Proxy of C++ BidirectionalStream class"""
    __swig_setmethods__ = {}
    for _s in [InputStream,OutputStream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidirectionalStream, name, value)
    __swig_getmethods__ = {}
    for _s in [InputStream,OutputStream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BidirectionalStream, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_io.delete_BidirectionalStream
    __del__ = lambda self : None;
BidirectionalStream_swigregister = _coda_io.BidirectionalStream_swigregister
BidirectionalStream_swigregister(BidirectionalStream)

class Seekable(_object):
    """Proxy of C++ Seekable class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Seekable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Seekable, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_io.delete_Seekable
    __del__ = lambda self : None;
    CURRENT = _coda_io.Seekable_CURRENT
    START = _coda_io.Seekable_START
    END = _coda_io.Seekable_END
    def seek(*args):
        """seek(self, sys::Off_T offset, Whence whence) -> sys::Off_T"""
        return _coda_io.Seekable_seek(*args)

    def tell(*args):
        """tell(self) -> sys::Off_T"""
        return _coda_io.Seekable_tell(*args)

Seekable_swigregister = _coda_io.Seekable_swigregister
Seekable_swigregister(Seekable)

class SeekableInputStream(InputStream,Seekable):
    """Proxy of C++ SeekableInputStream class"""
    __swig_setmethods__ = {}
    for _s in [InputStream,Seekable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SeekableInputStream, name, value)
    __swig_getmethods__ = {}
    for _s in [InputStream,Seekable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeekableInputStream, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_io.delete_SeekableInputStream
    __del__ = lambda self : None;
    def read(*args):
        """read(self, sys::byte b, sys::Size_T len) -> sys::SSize_T"""
        return _coda_io.SeekableInputStream_read(*args)

    def streamTo(*args):
        """
        streamTo(self, OutputStream soi, sys::SSize_T numBytes=IS_END) -> sys::SSize_T
        streamTo(self, OutputStream soi) -> sys::SSize_T
        """
        return _coda_io.SeekableInputStream_streamTo(*args)

SeekableInputStream_swigregister = _coda_io.SeekableInputStream_swigregister
SeekableInputStream_swigregister(SeekableInputStream)

class SeekableOutputStream(OutputStream,Seekable):
    """Proxy of C++ SeekableOutputStream class"""
    __swig_setmethods__ = {}
    for _s in [OutputStream,Seekable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SeekableOutputStream, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputStream,Seekable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeekableOutputStream, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_io.delete_SeekableOutputStream
    __del__ = lambda self : None;
    def write(*args):
        """write(self, sys::byte b, sys::Size_T len)"""
        return _coda_io.SeekableOutputStream_write(*args)

SeekableOutputStream_swigregister = _coda_io.SeekableOutputStream_swigregister
SeekableOutputStream_swigregister(SeekableOutputStream)

class SeekableBidirectionalStream(BidirectionalStream,Seekable):
    """Proxy of C++ SeekableBidirectionalStream class"""
    __swig_setmethods__ = {}
    for _s in [BidirectionalStream,Seekable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SeekableBidirectionalStream, name, value)
    __swig_getmethods__ = {}
    for _s in [BidirectionalStream,Seekable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeekableBidirectionalStream, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _coda_io.delete_SeekableBidirectionalStream
    __del__ = lambda self : None;
    def read(*args):
        """read(self, sys::byte b, sys::Size_T len) -> sys::SSize_T"""
        return _coda_io.SeekableBidirectionalStream_read(*args)

    def write(*args):
        """write(self, sys::byte b, sys::Size_T len)"""
        return _coda_io.SeekableBidirectionalStream_write(*args)

    def streamTo(*args):
        """
        streamTo(self, OutputStream soi, sys::SSize_T numBytes=IS_END) -> sys::SSize_T
        streamTo(self, OutputStream soi) -> sys::SSize_T
        """
        return _coda_io.SeekableBidirectionalStream_streamTo(*args)

SeekableBidirectionalStream_swigregister = _coda_io.SeekableBidirectionalStream_swigregister
SeekableBidirectionalStream_swigregister(SeekableBidirectionalStream)

class StringStream(SeekableBidirectionalStream):
    """Proxy of C++ StringStream class"""
    __swig_setmethods__ = {}
    for _s in [SeekableBidirectionalStream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringStream, name, value)
    __swig_getmethods__ = {}
    for _s in [SeekableBidirectionalStream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringStream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> StringStream"""
        this = _coda_io.new_StringStream(*args)
        try: self.this.append(this)
        except: self.this = this
    def tell(*args):
        """tell(self) -> sys::Off_T"""
        return _coda_io.StringStream_tell(*args)

    def seek(*args):
        """seek(self, sys::Off_T offset, Whence whence) -> sys::Off_T"""
        return _coda_io.StringStream_seek(*args)

    def available(*args):
        """available(self) -> sys::Off_T"""
        return _coda_io.StringStream_available(*args)

    def write(*args):
        """
        write(self, sys::byte b)
        write(self, string str)
        write(self, sys::byte b, sys::Size_T size)
        """
        return _coda_io.StringStream_write(*args)

    def read(*args):
        """read(self, sys::byte b, sys::Size_T len) -> sys::SSize_T"""
        return _coda_io.StringStream_read(*args)

    def stream(*args):
        """
        stream(self) -> std::stringstream
        stream(self) -> std::stringstream
        """
        return _coda_io.StringStream_stream(*args)

    def reset(*args):
        """reset(self)"""
        return _coda_io.StringStream_reset(*args)

    __swig_destroy__ = _coda_io.delete_StringStream
    __del__ = lambda self : None;
StringStream_swigregister = _coda_io.StringStream_swigregister
StringStream_swigregister(StringStream)

class NullInputStream(InputStream):
    """Proxy of C++ NullInputStream class"""
    __swig_setmethods__ = {}
    for _s in [InputStream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullInputStream, name, value)
    __swig_getmethods__ = {}
    for _s in [InputStream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NullInputStream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, sys::SSize_T size) -> NullInputStream"""
        this = _coda_io.new_NullInputStream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coda_io.delete_NullInputStream
    __del__ = lambda self : None;
    def available(*args):
        """available(self) -> sys::Off_T"""
        return _coda_io.NullInputStream_available(*args)

    def read(*args):
        """read(self, sys::byte b, sys::Size_T len) -> sys::SSize_T"""
        return _coda_io.NullInputStream_read(*args)

    def readln(*args):
        """readln(self, sys::byte cStr, sys::Size_T strLenPlusNullByte) -> sys::SSize_T"""
        return _coda_io.NullInputStream_readln(*args)

    def streamTo(*args):
        """
        streamTo(self, OutputStream soi, sys::SSize_T numBytes=IS_END) -> sys::SSize_T
        streamTo(self, OutputStream soi) -> sys::SSize_T
        """
        return _coda_io.NullInputStream_streamTo(*args)

NullInputStream_swigregister = _coda_io.NullInputStream_swigregister
NullInputStream_swigregister(NullInputStream)

class NullOutputStream(OutputStream):
    """Proxy of C++ NullOutputStream class"""
    __swig_setmethods__ = {}
    for _s in [OutputStream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullOutputStream, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputStream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NullOutputStream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> NullOutputStream"""
        this = _coda_io.new_NullOutputStream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coda_io.delete_NullOutputStream
    __del__ = lambda self : None;
    def writeln(*args):
        """writeln(self, string ?)"""
        return _coda_io.NullOutputStream_writeln(*args)

    def write(*args):
        """
        write(self, sys::byte ?)
        write(self, string ?)
        write(self, sys::byte ?, sys::Size_T ?)
        """
        return _coda_io.NullOutputStream_write(*args)

    def flush(*args):
        """flush(self)"""
        return _coda_io.NullOutputStream_flush(*args)

NullOutputStream_swigregister = _coda_io.NullOutputStream_swigregister
NullOutputStream_swigregister(NullOutputStream)

class FileInputStream(SeekableInputStream):
    """Proxy of C++ FileInputStream class"""
    __swig_setmethods__ = {}
    for _s in [SeekableInputStream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileInputStream, name, value)
    __swig_getmethods__ = {}
    for _s in [SeekableInputStream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileInputStream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        FileInputStreamOS() -> FileInputStream
        FileInputStreamOS(string inputFile) -> FileInputStream
        __init__(self, sys::File inputFile) -> FileInputStream
        """
        this = _coda_io.new_FileInputStream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coda_io.delete_FileInputStream
    __del__ = lambda self : None;
    def available(*args):
        """available(self) -> sys::Off_T"""
        return _coda_io.FileInputStream_available(*args)

    def isOpen(*args):
        """isOpen(self) -> bool"""
        return _coda_io.FileInputStream_isOpen(*args)

    def create(*args):
        """create(self, string str)"""
        return _coda_io.FileInputStream_create(*args)

    def seek(*args):
        """seek(self, sys::Off_T off, Whence whence) -> sys::Off_T"""
        return _coda_io.FileInputStream_seek(*args)

    def tell(*args):
        """tell(self) -> sys::Off_T"""
        return _coda_io.FileInputStream_tell(*args)

    def close(*args):
        """close(self)"""
        return _coda_io.FileInputStream_close(*args)

    def read(*args):
        """read(self, sys::byte b, sys::Size_T len) -> sys::SSize_T"""
        return _coda_io.FileInputStream_read(*args)

FileInputStream_swigregister = _coda_io.FileInputStream_swigregister
FileInputStream_swigregister(FileInputStream)

class FileOutputStream(SeekableOutputStream):
    """Proxy of C++ FileOutputStream class"""
    __swig_setmethods__ = {}
    for _s in [SeekableOutputStream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileOutputStream, name, value)
    __swig_getmethods__ = {}
    for _s in [SeekableOutputStream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileOutputStream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        FileOutputStreamOS() -> FileOutputStream
        FileOutputStreamOS(string outputFile, int creationFlags=sys::File::CREATE|sys::File::TRUNCATE) -> FileOutputStream
        __init__(self, string outputFile) -> FileOutputStream
        """
        this = _coda_io.new_FileOutputStream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _coda_io.delete_FileOutputStream
    __del__ = lambda self : None;
    def isOpen(*args):
        """isOpen(self) -> bool"""
        return _coda_io.FileOutputStream_isOpen(*args)

    def create(*args):
        """
        create(self, string str, int creationFlags=sys::File::CREATE|sys::File::TRUNCATE)
        create(self, string str)
        """
        return _coda_io.FileOutputStream_create(*args)

    def close(*args):
        """close(self)"""
        return _coda_io.FileOutputStream_close(*args)

    def flush(*args):
        """flush(self)"""
        return _coda_io.FileOutputStream_flush(*args)

    def seek(*args):
        """seek(self, sys::Off_T offset, Whence whence) -> sys::Off_T"""
        return _coda_io.FileOutputStream_seek(*args)

    def tell(*args):
        """tell(self) -> sys::Off_T"""
        return _coda_io.FileOutputStream_tell(*args)

    def write(*args):
        """
        write(self, sys::byte b)
        write(self, string str)
        write(self, sys::byte b, sys::Size_T len)
        """
        return _coda_io.FileOutputStream_write(*args)

FileOutputStream_swigregister = _coda_io.FileOutputStream_swigregister
FileOutputStream_swigregister(FileOutputStream)



