# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _math_poly
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class Poly1D(_object):
    """Proxy of C++ Poly1D class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Poly1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Poly1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Poly1D
        __init__(self, std::vector<(double)> coef) -> Poly1D
        __init__(self, size_t order) -> Poly1D
        __init__(self, size_t order, double coef) -> Poly1D
        """
        this = _math_poly.new_Poly1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def order(*args):
        """order(self) -> size_t"""
        return _math_poly.Poly1D_order(*args)

    def size(*args):
        """size(self) -> size_t"""
        return _math_poly.Poly1D_size(*args)

    def empty(*args):
        """empty(self) -> bool"""
        return _math_poly.Poly1D_empty(*args)

    def scaleVariable(*args):
        """scaleVariable(self, double scale) -> Poly1D"""
        return _math_poly.Poly1D_scaleVariable(*args)

    def truncateTo(*args):
        """truncateTo(self, size_t order) -> Poly1D"""
        return _math_poly.Poly1D_truncateTo(*args)

    def truncateToNonZeros(*args):
        """
        truncateToNonZeros(self, double zeroEpsilon=0.0) -> Poly1D
        truncateToNonZeros(self) -> Poly1D
        """
        return _math_poly.Poly1D_truncateToNonZeros(*args)

    def transformInput(*args):
        """
        transformInput(self, Poly1D gx, double zeroEpsilon=0.0) -> Poly1D
        transformInput(self, Poly1D gx) -> Poly1D
        """
        return _math_poly.Poly1D_transformInput(*args)

    def copyFrom(*args):
        """copyFrom(self, Poly1D p)"""
        return _math_poly.Poly1D_copyFrom(*args)

    def __call__(*args):
        """__call__(self, double at) -> double"""
        return _math_poly.Poly1D___call__(*args)

    def integrate(*args):
        """integrate(self, double start, double end) -> double"""
        return _math_poly.Poly1D_integrate(*args)

    def derivative(*args):
        """derivative(self) -> Poly1D"""
        return _math_poly.Poly1D_derivative(*args)

    def __imul__(*args):
        """
        __imul__(self, double cv) -> Poly1D
        __imul__(self, Poly1D p) -> Poly1D
        """
        return _math_poly.Poly1D___imul__(*args)

    def __mul__(*args):
        """
        __mul__(self, double cv) -> Poly1D
        __mul__(self, Poly1D p) -> Poly1D
        """
        return _math_poly.Poly1D___mul__(*args)

    def __iadd__(*args):
        """__iadd__(self, Poly1D p) -> Poly1D"""
        return _math_poly.Poly1D___iadd__(*args)

    def __add__(*args):
        """__add__(self, Poly1D p) -> Poly1D"""
        return _math_poly.Poly1D___add__(*args)

    def __isub__(*args):
        """__isub__(self, Poly1D p) -> Poly1D"""
        return _math_poly.Poly1D___isub__(*args)

    def __sub__(*args):
        """__sub__(self, Poly1D p) -> Poly1D"""
        return _math_poly.Poly1D___sub__(*args)

    def __idiv__(*args):
        """__idiv__(self, double cv) -> Poly1D"""
        return _math_poly.Poly1D___idiv__(*args)

    def __div__(*args):
        """__div__(self, double cv) -> Poly1D"""
        return _math_poly.Poly1D___div__(*args)

    def power(*args):
        """power(self, size_t toThe) -> Poly1D"""
        return _math_poly.Poly1D_power(*args)

    def __getitem__(*args):
        """__getitem__(self, long i) -> double"""
        return _math_poly.Poly1D___getitem__(*args)

    def __setitem__(*args):
        """__setitem__(self, long i, double val)"""
        return _math_poly.Poly1D___setitem__(*args)

    __swig_destroy__ = _math_poly.delete_Poly1D
    __del__ = lambda self : None;
Poly1D_swigregister = _math_poly.Poly1D_swigregister
Poly1D_swigregister(Poly1D)

class Poly2D(_object):
    """Proxy of C++ Poly2D class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Poly2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Poly2D, name)
    __repr__ = _swig_repr
    def coeffs(*args):
        """coeffs(self) -> std::vector<(math::poly::OneD<(double)>)>"""
        return _math_poly.Poly2D_coeffs(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> Poly2D
        __init__(self, size_t orderX, size_t orderY) -> Poly2D
        """
        this = _math_poly.new_Poly2D(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(*args):
        """empty(self) -> bool"""
        return _math_poly.Poly2D_empty(*args)

    def orderX(*args):
        """orderX(self) -> size_t"""
        return _math_poly.Poly2D_orderX(*args)

    def orderY(*args):
        """orderY(self) -> size_t"""
        return _math_poly.Poly2D_orderY(*args)

    def __call__(*args):
        """__call__(self, double atX, double atY) -> double"""
        return _math_poly.Poly2D___call__(*args)

    def integrate(*args):
        """integrate(self, double xStart, double xEnd, double yStart, double yEnd) -> double"""
        return _math_poly.Poly2D_integrate(*args)

    def set(*args):
        """set(self, size_t i, Poly1D p)"""
        return _math_poly.Poly2D_set(*args)

    def flipXY(*args):
        """flipXY(self) -> Poly2D"""
        return _math_poly.Poly2D_flipXY(*args)

    def derivativeY(*args):
        """derivativeY(self) -> Poly2D"""
        return _math_poly.Poly2D_derivativeY(*args)

    def derivativeX(*args):
        """derivativeX(self) -> Poly2D"""
        return _math_poly.Poly2D_derivativeX(*args)

    def derivativeXY(*args):
        """derivativeXY(self) -> Poly2D"""
        return _math_poly.Poly2D_derivativeXY(*args)

    def scaleVariable(*args):
        """
        scaleVariable(self, double scaleX, double scaleY) -> Poly2D
        scaleVariable(self, double scale) -> Poly2D
        """
        return _math_poly.Poly2D_scaleVariable(*args)

    def truncateTo(*args):
        """truncateTo(self, size_t orderX, size_t orderY) -> Poly2D"""
        return _math_poly.Poly2D_truncateTo(*args)

    def truncateToNonZeros(*args):
        """
        truncateToNonZeros(self, double zeroEpsilon=0.0) -> Poly2D
        truncateToNonZeros(self) -> Poly2D
        """
        return _math_poly.Poly2D_truncateToNonZeros(*args)

    def transformInput(*args):
        """
        transformInput(self, Poly2D gx, Poly2D gy, double zeroEpsilon=0.0) -> Poly2D
        transformInput(self, Poly2D gx, Poly2D gy) -> Poly2D
        transformInput(self, Poly2D gx, double zeroEpsilon=0.0) -> Poly2D
        transformInput(self, Poly2D gx) -> Poly2D
        """
        return _math_poly.Poly2D_transformInput(*args)

    def atY(*args):
        """atY(self, double y) -> Poly1D"""
        return _math_poly.Poly2D_atY(*args)

    def __imul__(*args):
        """
        __imul__(self, double cv) -> Poly2D
        __imul__(self, Poly2D p) -> Poly2D
        """
        return _math_poly.Poly2D___imul__(*args)

    def __mul__(*args):
        """
        __mul__(self, double cv) -> Poly2D
        __mul__(self, Poly2D p) -> Poly2D
        """
        return _math_poly.Poly2D___mul__(*args)

    def __iadd__(*args):
        """__iadd__(self, Poly2D p) -> Poly2D"""
        return _math_poly.Poly2D___iadd__(*args)

    def __add__(*args):
        """__add__(self, Poly2D p) -> Poly2D"""
        return _math_poly.Poly2D___add__(*args)

    def __isub__(*args):
        """__isub__(self, Poly2D p) -> Poly2D"""
        return _math_poly.Poly2D___isub__(*args)

    def __sub__(*args):
        """__sub__(self, Poly2D p) -> Poly2D"""
        return _math_poly.Poly2D___sub__(*args)

    def __idiv__(*args):
        """__idiv__(self, double cv) -> Poly2D"""
        return _math_poly.Poly2D___idiv__(*args)

    def __div__(*args):
        """__div__(self, double cv) -> Poly2D"""
        return _math_poly.Poly2D___div__(*args)

    def __eq__(*args):
        """__eq__(self, Poly2D p) -> bool"""
        return _math_poly.Poly2D___eq__(*args)

    def __ne__(*args):
        """__ne__(self, Poly2D p) -> bool"""
        return _math_poly.Poly2D___ne__(*args)

    def power(*args):
        """power(self, size_t toThe) -> Poly2D"""
        return _math_poly.Poly2D_power(*args)

    __swig_destroy__ = _math_poly.delete_Poly2D
    __del__ = lambda self : None;
Poly2D_swigregister = _math_poly.Poly2D_swigregister
Poly2D_swigregister(Poly2D)



