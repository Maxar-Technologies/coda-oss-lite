# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _xml_lite
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class Element(_object):
    """Proxy of C++ Element class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Element, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Element, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _xml_lite.delete_Element
    __del__ = lambda self : None;
    def destroyChildren(*args):
        """destroyChildren(self)"""
        return _xml_lite.Element_destroyChildren(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> Element
        __init__(self, std::string qname, std::string uri="", std::string characterData="") -> Element
        __init__(self, std::string qname, std::string uri="") -> Element
        __init__(self, std::string qname) -> Element
        __init__(self, Element element) -> Element
        """
        this = _xml_lite.new_Element(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args):
        """clone(self, Element element)"""
        return _xml_lite.Element_clone(*args)

    def attribute(*args):
        """attribute(self, std::string s) -> std::string"""
        return _xml_lite.Element_attribute(*args)

    def getElementsByTagNameNS(*args):
        """
        getElementsByTagNameNS(self, std::string qname, std::vector<(p.xml::lite::Element)> elements, 
            bool recurse=False)
        getElementsByTagNameNS(self, std::string qname, std::vector<(p.xml::lite::Element)> elements)
        getElementsByTagNameNS(self, std::string qname, bool recurse=False) -> std::vector<(p.xml::lite::Element)>
        getElementsByTagNameNS(self, std::string qname) -> std::vector<(p.xml::lite::Element)>
        """
        return _xml_lite.Element_getElementsByTagNameNS(*args)

    def getElementsByTagName(*args):
        """
        getElementsByTagName(self, std::string localName, std::vector<(p.xml::lite::Element)> elements, 
            bool recurse=False)
        getElementsByTagName(self, std::string localName, std::vector<(p.xml::lite::Element)> elements)
        getElementsByTagName(self, std::string localName, bool recurse=False) -> std::vector<(p.xml::lite::Element)>
        getElementsByTagName(self, std::string localName) -> std::vector<(p.xml::lite::Element)>
        getElementsByTagName(self, std::string uri, std::string localName, std::vector<(p.xml::lite::Element)> elements, 
            bool recurse=False)
        getElementsByTagName(self, std::string uri, std::string localName, std::vector<(p.xml::lite::Element)> elements)
        """
        return _xml_lite.Element_getElementsByTagName(*args)

    def setNamespacePrefix(*args):
        """setNamespacePrefix(self, std::string prefix, std::string uri)"""
        return _xml_lite.Element_setNamespacePrefix(*args)

    def setNamespaceURI(*args):
        """setNamespaceURI(self, std::string prefix, std::string uri)"""
        return _xml_lite.Element_setNamespaceURI(*args)

    def _print(*args):
        """_print(self, io::OutputStream stream)"""
        return _xml_lite.Element__print(*args)

    def prettyPrint(*args):
        """
        prettyPrint(self, io::OutputStream stream, std::string formatter="    ")
        prettyPrint(self, io::OutputStream stream)
        """
        return _xml_lite.Element_prettyPrint(*args)

    def hasElement(*args):
        """
        hasElement(self, std::string localName) -> bool
        hasElement(self, std::string uri, std::string localName) -> bool
        """
        return _xml_lite.Element_hasElement(*args)

    def getCharacterData(*args):
        """getCharacterData(self) -> std::string"""
        return _xml_lite.Element_getCharacterData(*args)

    def setCharacterData(*args):
        """setCharacterData(self, std::string characters)"""
        return _xml_lite.Element_setCharacterData(*args)

    def setLocalName(*args):
        """setLocalName(self, std::string localName)"""
        return _xml_lite.Element_setLocalName(*args)

    def getLocalName(*args):
        """getLocalName(self) -> std::string"""
        return _xml_lite.Element_getLocalName(*args)

    def setQName(*args):
        """setQName(self, std::string qname)"""
        return _xml_lite.Element_setQName(*args)

    def getQName(*args):
        """getQName(self) -> std::string"""
        return _xml_lite.Element_getQName(*args)

    def setUri(*args):
        """setUri(self, std::string uri)"""
        return _xml_lite.Element_setUri(*args)

    def getUri(*args):
        """getUri(self) -> std::string"""
        return _xml_lite.Element_getUri(*args)

    def getChildren(*args):
        """
        getChildren(self) -> std::vector<(p.xml::lite::Element)>
        getChildren(self) -> std::vector<(p.xml::lite::Element)>
        """
        return _xml_lite.Element_getChildren(*args)

    def getParent(*args):
        """getParent(self) -> Element"""
        return _xml_lite.Element_getParent(*args)

    def setParent(*args):
        """setParent(self, Element parent)"""
        return _xml_lite.Element_setParent(*args)

Element_swigregister = _xml_lite.Element_swigregister
Element_swigregister(Element)

class Document(_object):
    """Proxy of C++ Document class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Document, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Document, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Element rootNode=None, bool own=True) -> Document
        __init__(self, Element rootNode=None) -> Document
        __init__(self) -> Document
        """
        this = _xml_lite.new_Document(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xml_lite.delete_Document
    __del__ = lambda self : None;
    def clone(*args):
        """clone(self) -> Document"""
        return _xml_lite.Document_clone(*args)

    def createElement(*args):
        """
        createElement(self, std::string qname, std::string uri, std::string characterData="") -> Element
        createElement(self, std::string qname, std::string uri) -> Element
        """
        return _xml_lite.Document_createElement(*args)

    def destroy(*args):
        """destroy(self)"""
        return _xml_lite.Document_destroy(*args)

    def insert(*args):
        """insert(self, Element element, Element underThis)"""
        return _xml_lite.Document_insert(*args)

    def remove(*args):
        """
        remove(self, Element toDelete)
        remove(self, Element toDelete, Element fromHere)
        """
        return _xml_lite.Document_remove(*args)

    def setRootElement(*args):
        """
        setRootElement(self, Element element, bool own=True)
        setRootElement(self, Element element)
        """
        return _xml_lite.Document_setRootElement(*args)

    def getRootElement(*args):
        """
        getRootElement(self, bool steal=False) -> Element
        getRootElement(self) -> Element
        getRootElement(self) -> Element
        """
        return _xml_lite.Document_getRootElement(*args)

Document_swigregister = _xml_lite.Document_swigregister
Document_swigregister(Document)

class MinidomParser(_object):
    """Proxy of C++ MinidomParser class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinidomParser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MinidomParser, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> MinidomParser"""
        this = _xml_lite.new_MinidomParser(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _xml_lite.delete_MinidomParser
    __del__ = lambda self : None;
    def parse(*args):
        """
        parse(self, io::InputStream is, int size=io::InputStream::IS_END)
        parse(self, io::InputStream is)
        """
        return _xml_lite.MinidomParser_parse(*args)

    def clear(*args):
        """clear(self)"""
        return _xml_lite.MinidomParser_clear(*args)

    def getDocument(*args):
        """
        getDocument(self) -> Document
        getDocument(self, bool steal=False) -> Document
        getDocument(self) -> Document
        """
        return _xml_lite.MinidomParser_getDocument(*args)

    def getReader(*args):
        """
        getReader(self) -> XMLReader
        getReader(self) -> XMLReader
        """
        return _xml_lite.MinidomParser_getReader(*args)

    def setDocument(*args):
        """
        setDocument(self, Document newDocument, bool own=True)
        setDocument(self, Document newDocument)
        """
        return _xml_lite.MinidomParser_setDocument(*args)

    def preserveCharacterData(*args):
        """preserveCharacterData(self, bool preserve)"""
        return _xml_lite.MinidomParser_preserveCharacterData(*args)

MinidomParser_swigregister = _xml_lite.MinidomParser_swigregister
MinidomParser_swigregister(MinidomParser)



